/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bin;

import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.LinkOption;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.text.DateFormat;
import java.text.ParseException;
import java.time.Year;
import java.util.Date;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableModel;
//import org.opencv.core.Core;

/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
@SuppressWarnings("serial")
public class Legacy_Final extends javax.swing.JInternalFrame {

    DefaultTableModel model = new DefaultTableModel();
    String imagePath = "not available";
    int ID;
    String date1, dateRec, Date, Time;
    Records rec;
    DateFormat df;
    String dateString;
    MainFrame main;
    public AddChild addChild;
    //ImageIcon default =new ImageIcon();
    boolean update = false;
    public int childID;
    public File sFileWeb;
    String IPAString = null;
    String SDCSDString = null;
    boolean isUser;

    /**
     * Creates new form AddNewRecord
     */
    public Legacy_Final() {
        initComponents();
        // model=(DefaultTableModel) jTable1.getModel();
        //LoadNameOnlyData();
        // RefreshTime();

        jButton10.setEnabled(false);
        CriminalRecords.setWrapStyleWord(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        f_name = new javax.swing.JTextField();
        M_Name = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        Lname = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        age = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        nationalilty = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        religion = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        place_birth = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        presentADD = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        ZipCode = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        CBgender = new javax.swing.JComboBox();
        jLabel56 = new javax.swing.JLabel();
        date = new com.toedter.calendar.JDateChooser();
        cb_maritals_status = new javax.swing.JComboBox();
        InformantID = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        BirthCountry = new javax.swing.JTextField();
        Province = new javax.swing.JTextField();
        CbCityMun = new javax.swing.JComboBox();
        P_Barangay = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        position = new javax.swing.JTextField();
        IAPS_Loc = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        SDCSCS_Loc = new javax.swing.JLabel();
        jButton9 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jLabel47 = new javax.swing.JLabel();
        S_Codification = new javax.swing.JTextField();
        jLabel48 = new javax.swing.JLabel();
        Status_Codification = new javax.swing.JComboBox();
        jLabel60 = new javax.swing.JLabel();
        dateReC = new com.toedter.calendar.JDateChooser();
        jLabel28 = new javax.swing.JLabel();
        alias = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        Mode_Contanct = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        Mobile_Num = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        Category = new javax.swing.JTextField();
        Type = new javax.swing.JTextField();
        jLabel63 = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        Threat = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        jLabel54 = new javax.swing.JLabel();
        Handler = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        CriminalRecords = new javax.swing.JTextArea();
        jLabel67 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        PictureView = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        ImageFilePath = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setTitle("New Informant");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/new informant.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(1168, 566));
        setMinimumSize(new java.awt.Dimension(1168, 566));

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel18.setText("Basic Information");

        jLabel19.setText("*First Name");

        f_name.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        M_Name.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel20.setText("*Middle Name");

        Lname.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Lname.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                LnameCaretUpdate(evt);
            }
        });
        Lname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LnameActionPerformed(evt);
            }
        });

        jLabel21.setText("*Last Name");

        jLabel22.setText("*Birth Date");

        age.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel23.setText("Age");

        nationalilty.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        nationalilty.setText("Filipino");

        jLabel24.setText("Nationality");

        religion.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel25.setText("Religion");

        jLabel26.setText("Civil Status");

        place_birth.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel29.setText("Birth Province");

        presentADD.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        presentADD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presentADDActionPerformed(evt);
            }
        });

        jLabel30.setText("Present Address");

        ZipCode.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        ZipCode.setText("8009");
        ZipCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ZipCodeActionPerformed(evt);
            }
        });

        jLabel32.setText("Zip Code");

        CBgender.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CBgender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Gender", "MALE", "FEMALE", " " }));

        jLabel56.setText("Gender");

        date.setDateFormatString("MMMMM d, yyyy");
        date.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        date.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                datePropertyChange(evt);
            }
        });

        cb_maritals_status.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cb_maritals_status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Status", "Single", "Married", "Widowed", "Live-In" }));
        cb_maritals_status.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_maritals_statusItemStateChanged(evt);
            }
        });

        InformantID.setToolTipText("");
        InformantID.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel49.setText("Informant ID");

        jLabel9.setText("Province");

        jLabel61.setText("City/Municipality");

        jLabel62.setText("Birth Country");

        BirthCountry.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        BirthCountry.setText("Philippines");
        BirthCountry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BirthCountryActionPerformed(evt);
            }
        });

        Province.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Province.setText("Davao del Sur");
        Province.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProvinceActionPerformed(evt);
            }
        });

        CbCityMun.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CbCityMun.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Sulop", "Santa Cruz", "Digos", "Matanao", "Magsaysay", "Bansalan Hagunoy", "Padada", "Kiblawan", "Malalag", "Santa Maria", "Malita", "Don Marcelino", "Jose Abad Santos", "Sarangani", "Davao City" }));
        CbCityMun.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CbCityMunItemStateChanged(evt);
            }
        });
        CbCityMun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CbCityMunActionPerformed(evt);
            }
        });

        P_Barangay.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        P_Barangay.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select  Barangay", "Balasinon", "Buguis", "Carre", "Clib", "Harada Butai", "Katipunan", "Kiblagon", "Labon", "Laperas", "Lapla", "Litos", "Luparan", "Mckinley", "New Cebu", "Osmeña", "Palili", "Parame", "Poblacion", "Roxas", "Solongvale", "Tagolilong", "Tala-o", "Talas", "Tanwalang", "Waterfall" }));

        jLabel8.setText("Occupation");

        position.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        position.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionActionPerformed(evt);
            }
        });

        IAPS_Loc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IAPS_Loc.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/About.png"))); // NOI18N
        jButton2.setText("Attach Profile Sheet ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        SDCSCS_Loc.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        SDCSCS_Loc.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Information.png"))); // NOI18N
        jButton9.setText("Attach Source Data Card");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 0, 0));
        jLabel12.setText("*Fields required");

        jLabel2.setText("*Profile Sheet");

        jLabel3.setText("*Source Data Card");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel21)
                            .addComponent(jLabel22)
                            .addComponent(jLabel19)
                            .addComponent(jLabel20)
                            .addComponent(jLabel25)
                            .addComponent(jLabel23))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(M_Name)
                            .addComponent(Lname)
                            .addComponent(f_name, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(age, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(religion, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel7Layout.createSequentialGroup()
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(19, 19, 19)
                                                .addComponent(jLabel24))
                                            .addGroup(jPanel7Layout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel56, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(6, 6, 6)
                                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(nationalilty, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(CBgender, javax.swing.GroupLayout.Alignment.TRAILING, 0, 164, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel26)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                                        .addComponent(cb_maritals_status, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addGap(25, 25, 25)
                        .addComponent(presentADD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(P_Barangay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel62))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BirthCountry)
                            .addComponent(Province)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(CbCityMun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(jLabel32)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ZipCode))))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel8))
                        .addGap(38, 38, 38)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(place_birth)
                            .addComponent(position)))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel49)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(InformantID, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(1, 1, 1)
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel2)
                                .addComponent(IAPS_Loc, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(SDCSCS_Loc, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel18)
                                .addComponent(jLabel49))
                            .addComponent(InformantID, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(f_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(M_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(Lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(CBgender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel56))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nationalilty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel24)))
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(religion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_maritals_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)
                            .addComponent(jLabel25))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel30)
                            .addComponent(presentADD, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(P_Barangay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel61)
                            .addComponent(CbCityMun, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel32)
                            .addComponent(ZipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(Province, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel62)
                            .addComponent(BirthCountry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(place_birth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8))
                    .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(5, 5, 5)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SDCSCS_Loc, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IAPS_Loc, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton2)
                        .addComponent(jButton9)))
                .addContainerGap())
        );

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel47.setText("*Source of Codification");

        S_Codification.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel48.setText("*Status");

        Status_Codification.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        Status_Codification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Status", "Active", "Non-Active", " " }));

        jLabel60.setText("*Date of Recruitment");

        dateReC.setDateFormatString("MMMMM d, yyyy");
        dateReC.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateReC.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dateReCPropertyChange(evt);
            }
        });

        jLabel28.setText("*Alias");

        alias.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47)
                    .addComponent(jLabel48)
                    .addComponent(jLabel28)
                    .addComponent(jLabel60))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Status_Codification, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dateReC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alias, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(S_Codification, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(S_Codification, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(Status_Codification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateReC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel60))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addComponent(alias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70))
        );

        jPanel12.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel43.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel43.setText("Contact Information");

        jLabel46.setText("Mode of Contact");

        Mode_Contanct.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel50.setText("Mobile Number");

        Mobile_Num.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel46)
                            .addComponent(jLabel50))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Mode_Contanct)
                            .addComponent(Mobile_Num)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(jLabel43)
                        .addGap(200, 200, 200)))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(Mode_Contanct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel50)
                    .addComponent(Mobile_Num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 14, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        Category.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        Type.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel63.setText("Threat");

        jLabel65.setText("Category");

        Threat.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jLabel64.setText("Type");

        jLabel54.setText("Handler");

        Handler.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel63)
                        .addGap(30, 30, 30)
                        .addComponent(Threat))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel64)
                        .addGap(39, 39, 39)
                        .addComponent(Type))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel65)
                        .addGap(18, 18, 18)
                        .addComponent(Category))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel54)
                        .addGap(26, 26, 26)
                        .addComponent(Handler)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel63)
                    .addComponent(Threat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel64)
                    .addComponent(Type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel65)
                    .addComponent(Category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel54)
                    .addComponent(Handler, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        CriminalRecords.setColumns(20);
        CriminalRecords.setLineWrap(true);
        CriminalRecords.setRows(5);
        jScrollPane3.setViewportView(CriminalRecords);

        jLabel67.setText("Intelligence Report");

        jButton5.setText("Add Intel Report");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel67)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel67)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(5, 5, 5))
        );

        jTabbedPane1.addTab("Basic Information", jPanel1);

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jDesktopPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jDesktopPane1.setToolTipText("Recent Picture");
        jDesktopPane1.setMaximumSize(new java.awt.Dimension(161, 151));
        jDesktopPane1.setMinimumSize(new java.awt.Dimension(161, 151));

        PictureView.setText("jLabel50");
        PictureView.setMaximumSize(new java.awt.Dimension(161, 151));
        PictureView.setMinimumSize(new java.awt.Dimension(161, 151));
        PictureView.setPreferredSize(new java.awt.Dimension(161, 151));

        jDesktopPane1.setLayer(PictureView, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PictureView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(PictureView, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel1.setText("Recent Photo");

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton3.setText("Attach Photo");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton8.setText("Take Photo");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(67, 67, 67))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(ImageFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jDesktopPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ImageFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Save.png"))); // NOI18N
        jButton4.setText("Save");
        jButton4.setPreferredSize(new java.awt.Dimension(139, 35));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Close.png"))); // NOI18N
        jButton6.setText("Close");
        jButton6.setPreferredSize(new java.awt.Dimension(139, 35));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Apply.png"))); // NOI18N
        jButton10.setText("Update");
        jButton10.setPreferredSize(new java.awt.Dimension(139, 35));
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Create.png"))); // NOI18N
        jButton1.setText("New ");
        jButton1.setPreferredSize(new java.awt.Dimension(139, 35));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(43, 43, 43))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel4.setText("You may update ALL the informant details including the Description and Affiliation-Skills-Employment in the Search Records → Update All Details.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 895, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 503, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        System.out.println(this.getBounds());
        this.setVisible(false);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        if (!VerifyINput()) {
            SaveBasic();
            LoadLatestIDforUppdate();

            //UPDATEOthersAFTER_SAVE();
        }

        //LoadNameOnlyData();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        UPDATEOthers();
        //LoadNameOnlyData();
        LoadLatestIDforUppdate();
        if (rec == null) {

        } else {
            try {
                //  LoadNameOnlyData();
                rec.model.setRowCount(0);
                rec.LoadNameOnlyData();
            } catch (ParseException ex) {
                System.out.println(ex);
            }
        }

    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:this
        if (Lname.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Last name required to continue");
        } else {
            try {
                if (!update) {
                    JFileChooser chooser = new JFileChooser();
                    chooser.showOpenDialog(this);
                    File sFile = chooser.getSelectedFile();
                    //BufferedImage bufferedImage=ImageIO.read(sFile);
                    Image image = ImageIO.read(sFile);
                    Image myImage = image.getScaledInstance(161, 151, Image.SCALE_FAST);

                    File sourFile = new File(sFile.getAbsolutePath());
                    //File desFile =new File("C:\\Users\\JAMIEXXX3\\Documents\\sample\\5.jpg");

                    //Files.copy(sourFile.toPath(), desFile.toPath());
                    DBConnection.init();
                    Connection c = DBConnection.getConnection();
                    PreparedStatement ps;
                    ResultSet rs;
                    ps = c.prepareStatement("Select * from  informant_info");
                    rs = ps.executeQuery();
                    int i = 1;
                    while (rs.next()) {
                        i++;
                    }

                    if (f_name.getText().equals("") && Lname.getText().equals("")) {
                        JOptionPane.showMessageDialog(this, "To continue supply information before attaching image.");
                    } else {
                        PictureView.setIcon(new ImageIcon(myImage));
                        File desFile = new File(System.getProperty("user.dir") + "\\\\BIN_PIC\\\\" + f_name.getText() + Lname.getText() + M_Name.getText() + ".jpg");

                        if (desFile.exists()) {
                            System.out.println("file exist");
                            Files.copy(sourFile.toPath(), desFile.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
                            ImageFilePath.setText(imagePath);
                            System.out.println(desFile.getAbsolutePath());
                            imagePath = desFile.getCanonicalPath();
                            // String a="\"";
                            String b = "/";
                            imagePath = imagePath.replace("\\", b);
                            System.out.println(imagePath);
                            ImageFilePath.setText(imagePath);
                            i = 0;
                        } else {

                            Files.copy(sourFile.toPath(), desFile.toPath());
                            PictureView.setIcon(new ImageIcon(myImage));
                            System.out.println(desFile.getAbsolutePath());
                            imagePath = desFile.getCanonicalPath();
                            // String a="\"";
                            String b = "/";
                            imagePath = imagePath.replace("\\", b);
                            System.out.println(imagePath);
                            ImageFilePath.setText(imagePath);
                            i = 0;

                        }
                    }
                } else {

                    JOptionPane.showOptionDialog(this, "Updating Profile Photo ", "You sure you what to update Profile Photo", WIDTH, WIDTH, null, null, nationalilty);

                    JFileChooser chooser = new JFileChooser();
                    chooser.showOpenDialog(this);
                    File sFile = chooser.getSelectedFile();
                    // BufferedImage bufferedImage=ImageIO.read(sFile);
                    Image image = ImageIO.read(sFile);
                    Image myImage = image.getScaledInstance(161, 151, Image.SCALE_FAST);

                    File sourFile = new File(sFile.getAbsolutePath());

                    PictureView.setIcon(new ImageIcon(myImage));

                    //System.out.println("int i value  "+i+"");
                    File desFile = new File(System.getProperty("user.dir") + "\\BIN_PIC\\" + f_name.getText() + Lname.getText() + M_Name.getText() + ".jpg");

                    Files.copy(sourFile.toPath(), desFile.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
                    imagePath = desFile.getCanonicalPath();

                    ////  PictureView.setIcon(new ImageIcon(myImage));
                    //  System.out.println(desFile.getAbsolutePath());
                    // imagePath=desFile.getCanonicalPath();
                    // String a="\"";
                    String b = "/";
                    imagePath = imagePath.replace("\\", b);
                    System.out.println(imagePath);
                    ImageFilePath.setText(imagePath);

                    // i=0;
                }

            } catch (Exception e) {

                System.out.println(e);
                ImageFilePath.setText(imagePath);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    public void setpicture() throws IOException {
        try {

            Image image = ImageIO.read(sFileWeb);
            Image myImage = image.getScaledInstance(161, 151, Image.SCALE_FAST);

            File sourFile = new File(sFileWeb.getAbsolutePath());

            PictureView.setIcon(new ImageIcon(myImage));

            //System.out.println("int i value  "+i+"");
            File desFile = new File(System.getProperty("user.dir") + "\\BIN_PIC\\" + f_name.getText() + Lname.getText() + M_Name.getText() + ".jpg");

            Files.copy(sourFile.toPath(), desFile.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
            imagePath = desFile.getCanonicalPath();

            String b = "/";
            imagePath = imagePath.replace("\\", b);
            System.out.println(imagePath);
            ImageFilePath.setText(imagePath);

        } catch (IOException e) {
            System.out.println(e);
        }

    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here
        int i = JOptionPane.showConfirmDialog(this, "All fields will be cleared, Do you want to proceed?", "New Record", JOptionPane.YES_NO_OPTION);
        if (i == 0) {
            ClearField();
            jTabbedPane1.setSelectedIndex(0);
            f_name.requestFocus();
            jButton4.setEnabled(true);
            jButton10.setEnabled(false);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    public void DeleteChild() {

        try {

            int i = JOptionPane.showConfirmDialog(this, "Child will be deleted. Do you want to continue?", "Delete Child", JOptionPane.YES_NO_OPTION);
            if (i == 0) {

                DBConnection.init();
                Connection c = DBConnection.getConnection();
                PreparedStatement ps;
                ps = c.prepareStatement("Delete from child where idChild=(?)");

                ps.setString(1, String.valueOf(childID));

                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Child Deleted");
            }
        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        if (Lname.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Last name required to continue");
        } else {
//        Webcam web=new Webcam(this);
            //      web.setVisible(true);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void dateReCPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dateReCPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_dateReCPropertyChange

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:

            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(this);
            File sFile = chooser.getSelectedFile();
            //BufferedImage bufferedImage=ImageIO.read(sFile);
            Image image = ImageIO.read(sFile);
            //Image myImage=image.getScaledInstance(161, 151,Image.SCALE_FAST);

            File sourFile = new File(sFile.getAbsolutePath());
            File desFile = new File(System.getProperty("user.dir") + "\\\\legacy\\\\" + f_name.getText() + Lname.getText() + M_Name.getText() + "SDCSCS" + ".jpg");

            if (desFile.exists()) {
                System.out.println("file exist");
                Files.copy(sourFile.toPath(), desFile.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
            } else {

                Files.copy(sourFile.toPath(), desFile.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
            }
            String imagePath = desFile.getCanonicalPath();
            // String a="\"";
            String b = "/";
            SDCSCS_Loc.setText(imagePath);
            imagePath = imagePath.replace("\\", b);
            SDCSDString = imagePath;
            System.out.println(imagePath);

        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:

            JFileChooser chooser = new JFileChooser();
            chooser.showOpenDialog(this);
            File sFile = chooser.getSelectedFile();
            //BufferedImage bufferedImage=ImageIO.read(sFile);
            Image image = ImageIO.read(sFile);
            //Image myImage=image.getScaledInstance(161, 151,Image.SCALE_FAST);

            File sourFile = new File(sFile.getAbsolutePath());
            File desFile = new File(System.getProperty("user.dir") + "\\\\legacy\\\\" + f_name.getText() + Lname.getText() + M_Name.getText() + "IAPS" + ".jpg");

            if (desFile.exists()) {
                System.out.println("file exist");
                Files.copy(sourFile.toPath(), desFile.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
            } else {

                Files.copy(sourFile.toPath(), desFile.toPath(), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);
            }
            String imagePath = desFile.getCanonicalPath();
            // String a="\"";
            String b = "/";
            IAPS_Loc.setText(imagePath);
            imagePath = imagePath.replace("\\", b);
            IPAString = imagePath;
            System.out.println(imagePath);

        } catch (IOException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void positionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positionActionPerformed

    private void CbCityMunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CbCityMunActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CbCityMunActionPerformed

    private void CbCityMunItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CbCityMunItemStateChanged
        // TODO add your handling code here:
        System.out.println("item Selected");
        switch (CbCityMun.getSelectedItem().toString()) {
            case "Santa Cruz":
                ZipCode.setText("8001");
                System.out.println("8001");
                break;
            case "Digos":
                ZipCode.setText("8002");
                break;
            case "Sulop":
                ZipCode.setText("8009");
                break;
            case "Matanao":
                ZipCode.setText("8003");
                break;
            case "Magsaysay":
                ZipCode.setText("8004");
                break;
            case "Bansalan":
                ZipCode.setText("8005");
                break;
            case "Hagunoy":
                ZipCode.setText("8006");
                break;
            case "Padada":
                ZipCode.setText("8007");
                break;
            case "Kiblawan":
                ZipCode.setText("8008");
                break;
            case "Malalag":
                ZipCode.setText("8010");
                break;
            case "Santa Maria":
                ZipCode.setText("8011");
                break;
            case "Malita":
                ZipCode.setText("8012");
                break;
            case "Don Marcelino":
                ZipCode.setText("8013");
                break;
            case "Jose Abad Santos":
                ZipCode.setText("8014");
                break;
            case "Sarangani":
                ZipCode.setText("8015");
                break;

        }
    }//GEN-LAST:event_CbCityMunItemStateChanged

    private void ProvinceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProvinceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ProvinceActionPerformed

    private void BirthCountryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BirthCountryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BirthCountryActionPerformed

    private void cb_maritals_statusItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_maritals_statusItemStateChanged
        // TODO add your handling code here:
        //  if (cb_maritals_status.getSelectedItem().toString().equals("Single")) {
        //    Spouse.setText("N/A");
        //  }
        //  else if (cb_maritals_status.getSelectedItem().toString().equals("Married")) {
        //     if (Spouse.getText().equals("Single")) {
        //   Spouse.setText("");
        //   }
        //   }
    }//GEN-LAST:event_cb_maritals_statusItemStateChanged

    private void datePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_datePropertyChange
        try {
            Calendar now = Calendar.getInstance();
            Calendar bday = Calendar.getInstance();
            //now.setTime(null);
            bday.setTime(date.getDate());
            int age1 = now.get(Calendar.YEAR) - bday.get(Calendar.YEAR);

            age.setText(String.valueOf(age1));

        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_datePropertyChange

    private void ZipCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ZipCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ZipCodeActionPerformed

    private void presentADDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presentADDActionPerformed
        // TODO add your handling code here
    }//GEN-LAST:event_presentADDActionPerformed

    private void LnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LnameActionPerformed
        // TODO add your handling code here:
        if (!VerifyINput()) {
            JOptionPane.showMessageDialog(this, "Profile already exist please check records");
        }
    }//GEN-LAST:event_LnameActionPerformed

    private void LnameCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_LnameCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_LnameCaretUpdate

    IntelReport intelReport;
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (intelReport == null) {
            intelReport = new IntelReport();
            intelReport.setVisible(true);
        } else {
            intelReport.setVisible(true);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    public void LoadRecordsProfile() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where idInformant_info='" + ID + "'");
            rs = ps.executeQuery();

            if (rs.next()) {

                this.f_name.setText(rs.getString(2));
                this.M_Name.setText(rs.getString(3));
                this.Lname.setText(rs.getString(4));

                df = DateFormat.getDateInstance();
                // dateString=String.valueOf(df.format(date.getDate()));
                System.out.println(dateString);
                java.util.Date dateD = null;
                java.util.Date dateR = null;

                try {
                    dateD = new SimpleDateFormat("MMMM d, yyyy").parse(rs.getString(5));
                    dateR = new SimpleDateFormat("MMMM d, yyyy").parse(rs.getString(34));

                } catch (ParseException ex) {
                    System.out.println(ex);
                }

                date.setDate(dateD);
                dateReC.setDate(dateR);

                // this.B_date.setText(rs.getString(5));
                this.age.setText(rs.getString(6));
                this.nationalilty.setText(rs.getString(7));
                this.religion.setText(rs.getString(8));
                this.cb_maritals_status.setSelectedItem(rs.getString(9));
                // this.education.setText(rs.getString(10));
                this.alias.setText(rs.getString(11));
                this.place_birth.setText(rs.getString(12));
                this.presentADD.setText(rs.getString(13));
                //this.PermaentADD.setText(rs.getString(14));
                this.ZipCode.setText(rs.getString(15));
                this.S_Codification.setText(rs.getString(16));
                this.Status_Codification.setSelectedItem(rs.getString(17));
                this.P_Barangay.setSelectedItem(rs.getString(18));
                //this.Permanet_Barangay.setSelectedItem(rs.getString(19));
                //  this.face.setText(rs.getString(20));
                //   this.Hair.setText(rs.getString(21));
                //   this.Complexion.setSelectedItem(rs.getString(22));
                //  this.Eyes.setText(rs.getString(23));
                //  this.Build.setText(rs.getString(24));
                // this.Body.setText(rs.getString(25));
                //   this.Gen_Apprerance.setText(rs.getString(26));
                //  this.Inden_char.setText(rs.getString(27));
                //  this.Height.setText(rs.getString(28));
                //  this.Mil_Services.setText(rs.getString(29));
                // this.Other_Org.setText(rs.getString(30));
                //  this.Fore_training.setText(rs.getString(31));
                //  this.Employement.setText(rs.getString(32));
                this.position.setText(rs.getString(33));
                //   this.Date_Rec.setText(rs.getString(34));
                //  this.Add_emloyer.setText(rs.getString(35));
                //  this.Termination_date.setText(rs.getString(36));
                this.Mode_Contanct.setText(rs.getString(37));
                this.Mobile_Num.setText(rs.getString(38));
                //  this.Email.setText(rs.getString(39));
                // this.ContactPersonm.setText(rs.getString(40));
                // this.Mobile_Contact_Per.setText(rs.getString(41));

                //  this.CodeName.setText(rs.getString(45));
                //  this.pydonym.setText(rs.getString(46));
                this.Handler.setText(rs.getString(47));
                // this.OperationProject.setText(rs.getString(48));
                //  this.Spouse.setText(rs.getString(49));
                //  this.TIN.setText(rs.getString(50));
                CBgender.setSelectedItem(rs.getString(51));
                // this.target.setText(rs.getString(52));

                //this.InformantID.setText(rs.getString(42));
                System.out.println(rs.getString(44));
                File FImage = new File(rs.getString(44));
                ImageFilePath.setText(rs.getString(44));
                try {
                    Image image = ImageIO.read(FImage);
                    Image myImage = image.getScaledInstance(161, 151, Image.SCALE_FAST);
                    PictureView.setIcon(new ImageIcon(myImage));
                } catch (IOException ex) {

                    JOptionPane.showMessageDialog(this, ex);
                    System.out.println(ex);

                }

                //Image image=ImageIO.read(sFile);
                //Image myImage=image.getScaledInstance(161, 151,Image.SCALE_FAST)
                jTabbedPane1.setSelectedIndex(0);

            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Legacy_Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Legacy_Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Legacy_Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Legacy_Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Legacy_Final().setVisible(true);
            }
        });
    }

    public void ClearField() {
        this.f_name.setText("");
        this.M_Name.setText("");
        this.Lname.setText("");
        PictureView.setIcon(null);
        Province.setText("");
        BirthCountry.setText("");
        dateReC.setDate(null);
        date.setDate(null);
        //  CodeName.setText("");
        // OperationProject.setText("");
        Handler.setText("");
        //   pydonym.setText("");
        //  target.setText("");
        Threat.setText("");
        Type.setText(null);
        //  TIN.setText("");
        //  Spouse.setText("");
        nationalilty.setText("Filipino");
        BirthCountry.setText("Philippines");
        Province.setText("Davao del Sur");
        InformantID.setText("");
        CriminalRecords.setText("");
        date.cleanup();
        this.age.setText("");

        this.religion.setText("");
        this.cb_maritals_status.setSelectedItem(0);
        // this.education.setText("");
        this.alias.setText("");
        this.place_birth.setText("");
        this.presentADD.setText("");
        //  this.PermaentADD.setText("");
        this.ZipCode.setText("");
        this.S_Codification.setText("");
        this.Status_Codification.setSelectedIndex(0);
        this.P_Barangay.setSelectedIndex(0);
        //this.Permanet_Barangay.setSelectedIndex(0);
        // this.face.setText("");
        //   this.Hair.setText("");
        //  this.Complexion.setSelectedIndex(0);
        //  this.Eyes.setText("");
        //  this.Build.setText("");
        //  this.Body.setText("");
        //   this.Gen_Apprerance.setText("");
        //   this.Inden_char.setText("");
        //   this.Height.setText("");
        //    this.Mil_Services.setText("");
        // this.Other_Org.setText("");
        // this.Fore_training.setText("");
        //   this.Employement.setText("");
        this.position.setText("");
        // this.Date_Rec.setText("");
        dateReC.cleanup();
        //   this.Add_emloyer.setText("");
        //   this.Termination_date.setText("");
        this.Mode_Contanct.setText("");
        this.Mobile_Num.setText("");
        //  this.Email.setText("");
        //    this.ContactPersonm.setText("");
        //    this.Mobile_Contact_Per.setText("");
        ImageFilePath.setText("");
        f_name.requestFocus();
        dateRec = null;
        dateString = null;
        IPAString = null;
        SDCSDString = null;
        imagePath = "not available";
        CbCityMun.setSelectedIndex(0);
        ZipCode.setText("8009");
        //ImageFilePath=null;
        SDCSCS_Loc.setText("");
        IAPS_Loc.setText("");
        position.setText("");
        Category.setText("");
        cb_maritals_status.setSelectedIndex(0);

        // LoadNameOnlyData();
        model.setRowCount(0);
    }

    //*
    /**
     * public void LoadSerachDataId(){ try{ model.setRowCount(0); //String
     * S="%"+this.SearchData.getText()+"%"; DBConnection.init(); Connection
     * c=DBConnection.getConnection(); PreparedStatement ps; ResultSet rs;
     * ps=c.prepareStatement("Select * from informant_info where
     * idInformant_info like '"+S+"'"); rs=ps.executeQuery(); while(rs.next()){
     * model.addRow(new Object[]{rs.getString(1),rs.getString(4)+"
     * "+rs.getString(2)+" "+rs.getString(3), rs.getString(27)
     * ,rs.getString(34)}); }
     *
     *
     * }
     * catch(Exception e){System.out.println(e); }
     *
     *
     * }
     * public void LoadSerachDataFname(){ try{ model.setRowCount(0); // String
     * S="%"+this.SearchData.getText()+"%"; DBConnection.init(); Connection
     * c=DBConnection.getConnection(); PreparedStatement ps; ResultSet rs; //
     * ps=c.prepareStatement("Select * from informant_info where F_Name like
     * '"+S+"'"); rs=ps.executeQuery(); while(rs.next()){ model.addRow(new
     * Object[]{rs.getString(1),rs.getString(4)+" "+rs.getString(2)+"
     * "+rs.getString(3), rs.getString(27) ,rs.getString(34)}); } }
     * catch(Exception e){System.out.println(e); }} public void
     * LoadSerachDataFnameM_Name(){ try{ model.setRowCount(0); //String
     * S="%"+this.SearchData.getText()+"%"; DBConnection.init(); Connection
     * c=DBConnection.getConnection(); PreparedStatement ps; ResultSet rs; //
     * ps=c.prepareStatement("Select * from informant_info where M_Name like
     * '"+S+"'"); rs=ps.executeQuery(); while(rs.next()){ model.addRow(new
     * Object[]{rs.getString(1),rs.getString(4)+" "+rs.getString(2)+"
     * "+rs.getString(3), rs.getString(27) ,rs.getString(34)}); } }
     * catch(Exception e){System.out.println(e); }} public void
     * LoadSerachDataL_name(){ try{ model.setRowCount(0); // String
     * S="%"+this.SearchData.getText()+"%"; DBConnection.init(); Connection
     * c=DBConnection.getConnection(); PreparedStatement ps; ResultSet rs; //
     * ps=c.prepareStatement("Select * from informant_info where L_Name like
     * '"+S+"'"); rs=ps.executeQuery(); while(rs.next()){ model.addRow(new
     * Object[]{rs.getString(1),rs.getString(4)+" "+rs.getString(2)+"
     * "+rs.getString(3), rs.getString(27) ,rs.getString(34)}); } }
     * catch(Exception e){System.out.println(e); }} public void
     * LoadSerachDataD_Recuitment(){ try{ model.setRowCount(0); // String
     * S="%"+this.SearchData.getText()+"%"; DBConnection.init(); Connection
     * c=DBConnection.getConnection(); PreparedStatement ps; ResultSet rs; //
     * ps=c.prepareStatement("Select * from informant_info where D_Recuitment
     * like '"+S+"'"); rs=ps.executeQuery(); while(rs.next()){ model.addRow(new
     * Object[]{rs.getString(1),rs.getString(4)+" "+rs.getString(2)+"
     * "+rs.getString(3), rs.getString(27) ,rs.getString(34)}); } }
     * catch(Exception e){System.out.println(e); }} public void
     * LoadSerachDataIden_Char(){ try{ model.setRowCount(0); // String
     * S="%"+this.SearchData.getText()+"%"; DBConnection.init(); Connection
     * c=DBConnection.getConnection(); PreparedStatement ps; ResultSet rs;
     * ps=c.prepareStatement("Select * from informant_info where Iden_Char like
     * '"+S+"'"); rs=ps.executeQuery(); while(rs.next()){ model.addRow(new
     * Object[]{rs.getString(1),rs.getString(4)+" "+rs.getString(2)+"
     * "+rs.getString(3), rs.getString(27) ,rs.getString(34)}); } }
     * catch(Exception e){System.out.println(e); }}
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField BirthCountry;
    private javax.swing.JComboBox CBgender;
    private javax.swing.JTextField Category;
    private javax.swing.JComboBox CbCityMun;
    private javax.swing.JTextArea CriminalRecords;
    private javax.swing.JTextField Handler;
    private javax.swing.JLabel IAPS_Loc;
    private javax.swing.JTextField ImageFilePath;
    private javax.swing.JLabel InformantID;
    private javax.swing.JTextField Lname;
    private javax.swing.JTextField M_Name;
    private javax.swing.JTextField Mobile_Num;
    private javax.swing.JTextField Mode_Contanct;
    private javax.swing.JComboBox P_Barangay;
    private javax.swing.JLabel PictureView;
    private javax.swing.JTextField Province;
    private javax.swing.JLabel SDCSCS_Loc;
    private javax.swing.JTextField S_Codification;
    private javax.swing.JComboBox Status_Codification;
    private javax.swing.JTextField Threat;
    private javax.swing.JTextField Type;
    private javax.swing.JTextField ZipCode;
    private javax.swing.JTextField age;
    private javax.swing.JTextField alias;
    private javax.swing.JComboBox cb_maritals_status;
    private com.toedter.calendar.JDateChooser date;
    private com.toedter.calendar.JDateChooser dateReC;
    private javax.swing.JTextField f_name;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nationalilty;
    private javax.swing.JTextField place_birth;
    private javax.swing.JTextField position;
    private javax.swing.JTextField presentADD;
    private javax.swing.JTextField religion;
    // End of variables declaration//GEN-END:variables

    private Connection OpenDatabaseConnection() {
        Connection c = null;

        try {
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            c = DriverManager.getConnection("jdbc:mysql://localhost:3306/bin", "root", "root");
        } catch (Exception e) {
            System.out.println(e);
        }
        return c;
    }

    public void DateandTime() {
        Calendar cal = Calendar.getInstance();
        cal.getTime();
        SimpleDateFormat date = new SimpleDateFormat("yyyy/MM/d");
        SimpleDateFormat time = new SimpleDateFormat("hh:mm:ss");

        Date = (date.format(cal.getTime()));
        Time = (time.format(cal.getTime()));
    }

    public void RefreshTime() {
        TimerTask TT = new TimerTask() {
            @Override
            public void run() {
                DateandTime();
            }
        };

        Timer t = new Timer();
        t.scheduleAtFixedRate(TT, 1000, 1000);
    }

    public void SAVEallDATA() {
        try {

            if (f_name.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "the Field First Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                f_name.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (M_Name.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Middle Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                M_Name.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (Lname.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Last Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                Lname.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (age.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Age is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                age.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (nationalilty.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field nationality Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                nationalilty.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (religion.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Religion is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                religion.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (cb_maritals_status.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field nationality Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                cb_maritals_status.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (alias.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Alias Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                alias.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (place_birth.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Place of Birth is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                place_birth.requestFocus();
            } else if (presentADD.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Address is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                presentADD.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (presentADD.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Address is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                presentADD.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (presentADD.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Address is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                presentADD.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (ZipCode.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Zipcode is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                ZipCode.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (P_Barangay.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Barangay is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                P_Barangay.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (S_Codification.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Source Codification is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                S_Codification.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (Status_Codification.getSelectedItem().equals("Select Status")) {
                JOptionPane.showMessageDialog(this, "the Field Source Codification is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                Status_Codification.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (position.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Employment Positon in the Affiiliation-Skills- Employement Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(2);
                position.requestFocus();
            } else if (dateRec.equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Date of Recuitment  in the Affiiliation-Skills- Employement Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(2);
                dateReC.requestFocus();
            } else if (Mode_Contanct.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Mode of Contact  in the Contact Information  Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(4);
                Mode_Contanct.requestFocus();
            } else if (Mobile_Num.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Mobile Number  in the Contact Information  Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(4);
                Mobile_Num.requestFocus();
            } else if (CBgender.getSelectedItem().equals("Select Gender")) {
                JOptionPane.showMessageDialog(this, "the Field  Gender of Basic Infomation  in the Contact Information  Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(0);
                CBgender.requestFocus();
            } else {

                int a = JOptionPane.showOptionDialog(this, "Are You Sure you what to Add new Informant ?", "New Informant Intelegence", WIDTH, WIDTH, null, null, nationalilty);
                if (a == 0) {

                    DBConnection.init();
                    Connection c = DBConnection.getConnection();
                    PreparedStatement ps;
                    ResultSet rs;

                    ps = c.prepareStatement("Select * from informant_info where idInformant_info='" + this.InformantID.getText() + "'");
                    rs = ps.executeQuery();
                    if (rs.next()) {
                        JOptionPane.showMessageDialog(this, "Profile Already Exist. Please Verify Fields ");
                        return;
                    }

                    df = DateFormat.getDateInstance();
                    dateString = String.valueOf(df.format(date.getDate()));
                    System.out.println(dateString);

                    // df=DateFormat.getDateInstance();
                    dateRec = String.valueOf(df.format(dateReC.getDate()));
                    System.out.println(dateString);

//            ps=c.prepareStatement("Insert into informant_info (F_Name,M_Name,L_Name,B_Date,Age,Nationality,Religion,Mar_status,Education,Alias,Place_Birth,P_Adrress,Per_Adrress,Zipcode,S_Codification,Status,B_PAdrress,B_PreAdress,Face,Hair,Complexion,Eyes,Build,Body,Gen_App,Iden_Char,Height,Mel_Service,Other_Org,F_Training,Employement,Position,D_Recuitment,N_Employer,TerminationDate,Mode_Con,Mob_no,Email,P_Con,P_Con_num,EntryTime,EntryDate,PictureFilePath,CodeName,Psedonym,Handlers,OperationProject,SpouseName,TINNR,Gender,Target)values"+"('"+this.f_name.getText()+"','"+this.M_Name.getText()+"','"+this.Lname.getText()+"','"+dateString+"','"+this.age.getText()+"','"+this.nationalilty.getText()+"','"+this.religion.getText()+"','"+this.cb_maritals_status.getSelectedItem().toString()+"','"+this.education.getText()+"','"+this.alias.getText()+"','"+this.place_birth.getText()+"','"+this.presentADD.getText()+"','"+this.PermaentADD.getText()+"','"+this.ZipCode.getText()+"','"+this.S_Codification.getText()+"','"+this.Status_Codification.getSelectedItem().toString()+"','"+this.P_Barangay.getSelectedItem().toString()+"','"+this.Permanet_Barangay.getSelectedItem().toString()+"','"+this.face.getText()+"','"+this.Hair.getText()+"','"+this.Complexion.getSelectedItem().toString()+"','"+this.Eyes.getText()+"','"+this.Build.getText()+"','"+this.Body.getText()+"','"+this.Gen_Apprerance.getText()+"','"+this.Inden_char.getText()+"','"+this.Height.getText()+"','"+this.Mil_Services.getText()+"','"+this.Other_Org.getText()+"','"+this.Fore_training.getText()+"' , '"+this.Employement.getText()+"','"+this.position.getText()+"','"+dateRec+"','"+this.Add_emloyer.getText()+"','"+this.Termination_date.getText()+"','"+this.Mode_Contanct.getText()+"','"+this.Mobile_Num.getText()+"','"+this.Email.getText()+"','"+this.ContactPersonm.getText()+"','"+this.Mobile_Contact_Per.getText()+"','"+Time+"','"+Date+"','"+imagePath+"','"+this.CodeName.getText()+"','"+this.pydonym.getText()+"','"+this.Handler.getText()+"','"+this.OperationProject.getText()+"','"+this.Spouse.getText()+"','"+this.TIN.getText()+"','"+this.CBgender.getSelectedItem().toString()+"','"+this.target.getText()+"')");
                    System.out.println(ImageFilePath.getText().toString());
                    ps.execute();

                    JOptionPane.showMessageDialog(this, "Profile Saved. All Fields will Clearled ",
                            "Intgrated Information Record", JOptionPane.INFORMATION_MESSAGE);

                    ClearField();
                } else if (a == 1) {
                    this.jTabbedPane1.setSelectedIndex(0);
                    f_name.requestFocus();
                }

            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    public void SaveBasic() {
        try {

            if (f_name.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "The field first name is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                f_name.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (M_Name.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field middle name is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                M_Name.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (Lname.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field last name is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                Lname.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (age.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field age is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                age.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (nationalilty.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field nationality name is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                nationalilty.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } //  else if (religion.getText().equals("")) {
            //    JOptionPane.showMessageDialog(this, "The field religion is Empty","Empty Field",JOptionPane.WARNING_MESSAGE);
            //   religion.requestFocus();
            //     this.jTabbedPane1.setSelectedIndex(0);
            // }
            else if (cb_maritals_status.getSelectedItem().equals("Select Status")) {
                JOptionPane.showMessageDialog(this, "The field civil status is empty ", "Empty field", JOptionPane.WARNING_MESSAGE);
                cb_maritals_status.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } // else if (education.getText().equals("")) {
            //JOptionPane.showMessageDialog(this, "The field education is empty","Empty Field",JOptionPane.WARNING_MESSAGE);
            // education.requestFocus();
            // this.jTabbedPane1.setSelectedIndex(0);
            //   }
            else if (alias.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field alias name is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                alias.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } /// else if (place_birth.getText().equals("")) {
            // JOptionPane.showMessageDialog(this, "The field Place of Birth is Empty","Empty Field",JOptionPane.WARNING_MESSAGE);
            //  place_birth.requestFocus();
            // }
            else if (ZipCode.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field zipcode is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                ZipCode.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (P_Barangay.getSelectedItem().equals("Select  Barangay")) {
                JOptionPane.showMessageDialog(this, "The field present barangay is empty", "Empty field", JOptionPane.WARNING_MESSAGE);
                P_Barangay.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } //  else if (Permanet_Barangay.getSelectedItem().equals("Select  Barangay")) {
            //   JOptionPane.showMessageDialog(this, "The field Permanent Barangay is Empty","Empty Field",JOptionPane.WARNING_MESSAGE);
            //  Permanet_Barangay.requestFocus();
            //   this.jTabbedPane1.setSelectedIndex(0);
            // }
            else if (S_Codification.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field of Source codification is empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                S_Codification.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (Status_Codification.getSelectedItem().equals("Select Status")) {
                JOptionPane.showMessageDialog(this, "The field Status is empty. Please select status", "Empty Field", JOptionPane.WARNING_MESSAGE);
                Status_Codification.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (imagePath == null || imagePath.equals("")) {
                imagePath = "not available";
                this.jTabbedPane1.setSelectedIndex(0);
            } ///else if (Spouse.getText().equals("")) {
            // JOptionPane.showMessageDialog(this, "Spouse name empty supply field to continue ","Empty Field",JOptionPane.WARNING_MESSAGE);
            //      Status_Codification.requestFocus();
            //    this.jTabbedPane1.setSelectedIndex(0);
            //   }
            else if (Province.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field Provice name is empty supply field to continue.. ", "Empty field", JOptionPane.WARNING_MESSAGE);
                Province.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (BirthCountry.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "The field Birth Country is empty supply field to continue.. ", "Empty field", JOptionPane.WARNING_MESSAGE);
                BirthCountry.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (IPAString == null || IAPS_Loc.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "PLease attach the scanned Informant Profile Sheet  to continue.", "Empty Profile sheet", JOptionPane.WARNING_MESSAGE);
                BirthCountry.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (SDCSDString == null || SDCSCS_Loc.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "PLease attach the scanned Informant Source Data Card and Summary to continue.", "Empty Source data card", JOptionPane.WARNING_MESSAGE);
                BirthCountry.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (dateReC.getDate() == null) {
                JOptionPane.showMessageDialog(this, "The field Date of Recruitment is empty", "Empty Date of Recruitment", JOptionPane.WARNING_MESSAGE);
                BirthCountry.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else if (date.getDate() == null) {
                JOptionPane.showMessageDialog(this, "The field Date of Birth is empty", "Empty Birth Date", JOptionPane.WARNING_MESSAGE);
                BirthCountry.requestFocus();
                this.jTabbedPane1.setSelectedIndex(0);
            } else {
                int a = JOptionPane.showConfirmDialog(this, "Basic information will be saved. Do you want to continue?", "New Record", JOptionPane.YES_NO_OPTION);

                if (a == 0) {

                    DBConnection.init();
                    Connection c = DBConnection.getConnection();
                    PreparedStatement ps;

                    Calendar cal = Calendar.getInstance();
                    cal.getTime();
                    SimpleDateFormat date2 = new SimpleDateFormat("yyyy/MM/d");
                    SimpleDateFormat time = new SimpleDateFormat("hh:mm:ss");

                    Date = (date2.format(cal.getTime()));
                    Time = (time.format(cal.getTime()));

                    df = new SimpleDateFormat("yyyy/MM/d");
                    dateString = String.valueOf(df.format(date.getDate()));
                    Date myDate = df.parse(dateString);
                    System.out.println(dateString);

                    df = new SimpleDateFormat("yyyy/MM/d");
                    dateRec = String.valueOf(df.format(dateReC.getDate()));
                    Date myDateRec = df.parse(dateRec);
                    System.out.println(dateRec);

                    ps = c.prepareStatement("Insert into informant_info (F_Name,M_Name,L_Name,B_Date,Age,Nationality,Religion,Mar_status,Alias,Place_Birth,Zipcode,S_Codification,Status,B_PAdrress,Gender,PictureFilePath,EntryTime,EntryDate,D_Recuitment,Provice,Mun_City,BirthCounty,E_Date,E_Time,Mode_Con,Mob_no,Threat,Type,Category,Handlers,IAPS_loc,SDCSDS_loc,CriminalR,Position,P_Adrress)values" + "('" + this.f_name.getText() + "','" + this.M_Name.getText() + "','" + this.Lname.getText() + "','" + dateString + "','" + this.age.getText() + "','" + this.nationalilty.getText() + "','" + this.religion.getText() + "','" + this.cb_maritals_status.getSelectedItem().toString() + "','" + this.alias.getText() + "','" + this.place_birth.getText() + "','" + this.ZipCode.getText() + "','" + this.S_Codification.getText() + "','" + this.Status_Codification.getSelectedItem().toString() + "','" + this.P_Barangay.getSelectedItem().toString() + "','" + this.CBgender.getSelectedItem().toString() + "','" + imagePath + "','" + Time + "','" + Date + "','" + dateRec + "','" + Province.getText() + "','" + CbCityMun.getSelectedItem().toString() + "','" + BirthCountry.getText() + "','" + Date + "','" + Time + "','" + Mode_Contanct.getText() + "','" + Mobile_Num.getText() + "','" + Threat.getText() + "','" + Type.getText() + "','" + Category.getText() + "','" + Handler.getText() + "','" + IPAString + "','" + SDCSDString + "','" + CriminalRecords.getText() + "','" + position.getText() + "','" + presentADD.getText() + "')");
                    ps.execute();
                    System.out.println(ImageFilePath.getText());

                    JOptionPane.showMessageDialog(this, "Profile has been saved. You may update ALL the informant details including the \nDescription and Affiliation-Skills-Employment in the Search Records → Update All Details.",
                            "Integrated Information Record", JOptionPane.INFORMATION_MESSAGE);
                    jButton4.setEnabled(false);
                    jButton10.setEnabled(true);
                    // jTabbedPane1.setSelectedIndex(1);
                }

            }

        } catch (HeadlessException | SQLException | ParseException e) {
            JOptionPane.showMessageDialog(this, e);

            System.out.println(e);
        }

    }

    public void UPDATEOthers() {

        try {

            // JOptionPane.showConfirmDialog(this,"Do you want to update the current Fnformant Record. Do you what to Continue?","New Record",JOptionPane.YES_NO_OPTION);
            // int a=JOptionPane.showOptionDialog(this,"Do you want to update the current Fnformant Record", "Update Intelligence", WIDTH, WIDTH, null, null , nationalilty)
            int a = JOptionPane.showConfirmDialog(this, "Do you want to update the current Informant Record?", "Update Record", JOptionPane.YES_NO_OPTION);
            if (a == 0) {
                Connection c = OpenDatabaseConnection();
                PreparedStatement ps;

                df = new SimpleDateFormat("yyyy/MM/d");

                dateString = String.valueOf(df.format(date.getDate()));
                System.out.println(dateString);

                dateRec = String.valueOf(df.format(dateReC.getDate()));
                System.out.println(dateString);

                ps = c.prepareStatement("Update  informant_info set idInformant_info=(?),F_Name=(?),M_Name=(?),L_Name=(?),B_Date=(?),Age=(?),Nationality=(?),Religion=(?),Mar_status=(?),Alias=(?),Place_Birth=(?),P_Adrress=(?),Zipcode=(?),S_Codification=(?),Status=(?),B_PAdrress=(?),D_Recuitment=(?),Mode_Con=(?),Mob_no=(?),EntryTime=(?),EntryDate=(?),PictureFilePath=(?),Gender=(?),E_Date=(?),E_Time=(?),CriminalR=(?),Threat=(?),Type=(?),Category=(?),Mun_City=(?),Handlers=(?),IAPS_loc=(?),SDCSDS_loc=(?) where idInformant_info like(?)");
                //  +"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"'" + ",'"++"','"++"','"++"','"++"','"++"','"++"','"+)+"','"+"','"++"','"++"')");
                ps.setString(1, this.InformantID.getText());
                ps.setString(2, this.f_name.getText());
                ps.setString(3, this.M_Name.getText());
                ps.setString(4, this.Lname.getText());
                ps.setString(5, dateString);
                ps.setString(6, this.age.getText());
                ps.setString(7, this.nationalilty.getText());
                ps.setString(8, this.religion.getText());
                ps.setString(9, this.cb_maritals_status.getSelectedItem().toString());
//            ps.setString(10,this.education.getText());
                ps.setString(10, this.alias.getText());
                ps.setString(11, this.place_birth.getText());
                ps.setString(12, this.presentADD.getText());
//            ps.setString(14,this.PermaentADD.getText());
                ps.setString(13, this.ZipCode.getText());
                ps.setString(14, this.S_Codification.getText());
                ps.setString(15, this.Status_Codification.getSelectedItem().toString());
                ps.setString(16, this.P_Barangay.getSelectedItem().toString());
                // ps.setString(17,this.position.getText());
                ps.setString(17, dateRec);

                ps.setString(18, this.Mode_Contanct.getText());
                ps.setString(19, this.Mobile_Num.getText());
                ps.setString(20, Time);
                ps.setString(21, Date);
                String updateS = imagePath;
                // updateS=updateS.replace("\\", "/");
                System.out.println(imagePath + " hahahha");
                System.out.println(ImageFilePath.getText());
                ps.setString(22, ImageFilePath.getText());

                ps.setString(23, this.CBgender.getSelectedItem().toString());

                // ps.setString(52,this.target.getText());
                ps.setString(24, Date);
                ps.setString(25, Time);
                ps.setString(26, CriminalRecords.getText());
                ps.setString(27, Threat.getText());
                ps.setString(28, Type.getText());
                ps.setString(29, Category.getText());
                ps.setString(30, CbCityMun.getSelectedItem().toString());
                ps.setString(31, this.Handler.getText());
                ps.setString(32, IPAString);
                ps.setString(33, SDCSDString);

                LoadLatestIDforUppdate();
                ps.setString(34, String.valueOf(ID));

                ps.executeUpdate();

                JOptionPane.showMessageDialog(null, "Informant successfully updated!");
                //ID=0;
            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    public void UPDATEOthersAFTER_SAVE() {

        try {

            Connection c = OpenDatabaseConnection();
            PreparedStatement ps;

            df = new SimpleDateFormat("yyyy/MM/d");
            SimpleDateFormat dfs = new SimpleDateFormat("MMMMMMM d, yyyy");

            dateString = String.valueOf(df.format(date.getDate()));
            System.out.println(dateString);

            dateRec = String.valueOf(df.format(dateReC.getDate()));
            System.out.println(dateString);

            String dateSPouse;

            ps = c.prepareStatement("Update  informant_info set idInformant_info=(?),F_Name=(?),M_Name=(?),L_Name=(?),B_Date=(?),Age=(?),Nationality=(?),Religion=(?),Mar_status=(?),Education=(?),Alias=(?),Place_Birth=(?),P_Adrress=(?),Per_Adrress=(?),Zipcode=(?),S_Codification=(?),Status=(?),B_PAdrress=(?),B_PreAdress=(?),Face=(?),Hair=(?),Complexion=(?),Eyes=(?),Build=(?),Body=(?),Gen_App=(?),Iden_Char=(?),Height=(?),Mel_Service=(?),Other_Org=(?),F_Training=(?),Employement=(?),Position=(?),D_Recuitment=(?),N_Employer=(?),TerminationDate=(?),Mode_Con=(?),Mob_no=(?),Email=(?),P_Con=(?),P_Con_num=(?),EntryTime=(?),EntryDate=(?),PictureFilePath=(?),CodeName=(?),Psedonym=(?),Handlers=(?),OperationProject=(?),SpouseName=(?),TINNR=(?),Gender=(?),Target=(?),E_Date=(?),E_Time=(?),CriminalR=(?),Threat=(?),Type=(?),Category=(?),Mun_City=(?),Spouse_Bdate=(?) where idInformant_info like(?)");
            //  +"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"'" + ",'"++"','"++"','"++"','"++"','"++"','"++"','"+)+"','"+"','"++"','"++"')");
            ps.setString(1, this.InformantID.getText());
            ps.setString(2, this.f_name.getText());
            ps.setString(3, this.M_Name.getText());
            ps.setString(4, this.Lname.getText());
            ps.setString(5, dateString);
            ps.setString(6, this.age.getText());
            ps.setString(7, this.nationalilty.getText());
            ps.setString(8, this.religion.getText());
            ps.setString(9, this.cb_maritals_status.getSelectedItem().toString());
//            ps.setString(10,this.education.getText());
            ps.setString(11, this.alias.getText());
            ps.setString(12, this.place_birth.getText());
            ps.setString(13, this.presentADD.getText());
            // ps.setString(14,this.PermaentADD.getText());
            ps.setString(15, this.ZipCode.getText());
            ps.setString(16, this.S_Codification.getText());
            ps.setString(17, this.Status_Codification.getSelectedItem().toString());
            ps.setString(18, this.P_Barangay.getSelectedItem().toString());
            //  ps.setString(19,this.Permanet_Barangay.getSelectedItem().toString());
            // ps.setString(20,this.face.getText());
            //  ps.setString(21,this.Hair.getText());
            //  ps.setString(22,this.Complexion.getSelectedItem().toString());
            //  ps.setString(23,this.Eyes.getText());
            //   ps.setString(24,this.Build.getText());
            //   ps.setString(25,this.Body.getText());
            //  ps.setString(26,this.Gen_Apprerance.getText());
            //  ps.setString(27,this.Inden_char.getText());
            //  ps.setString(28,this.Height.getText());
            //   ps.setString(29,this.Mil_Services.getText());
            //   ps.setString(30,this.Other_Org.getText());
            //  ps.setString(31,this.Fore_training.getText());
            //  ps.setString(32,this.Employement.getText());
            ps.setString(33, this.position.getText());
            ps.setString(34, dateRec);
            //  ps.setString(35,this.Add_emloyer.getText());
            //  ps.setString(36,this.Termination_date.getText());
            ps.setString(37, this.Mode_Contanct.getText());
            ps.setString(38, this.Mobile_Num.getText());
            // ps.setString(39,this.Email.getText());
            //  ps.setString(40,this.ContactPersonm.getText());
            // ps.setString(41,this.Mobile_Contact_Per.getText());
            //  ps.setString(42,position1.getText());
            ps.setString(43, this.Date);

            String updateS = imagePath;
            // updateS=updateS.replace("\\", "/");
            System.out.println(imagePath + " hahahha");
            System.out.println(ImageFilePath.getText());
            ps.setString(44, ImageFilePath.getText());

            //   ps.setString(45,CodeName.getText());
            //  ps.setString(46,this.pydonym.getText());
            ps.setString(47, this.Handler.getText());
            // ps.setString(48,this.OperationProject.getText());
            //  ps.setString(49,this.Spouse.getText());
            //  ps.setString(50,this.TIN.getText());
            ps.setString(51, this.CBgender.getSelectedItem().toString());

            //   ps.setString(52,this.target.getText());
            ps.setString(53, Date);
            ps.setString(54, Time);
            ps.setString(55, CriminalRecords.getText());
            ps.setString(56, Threat.getText());
            ps.setString(57, Type.getText());
            ps.setString(58, Category.getText());
            ps.setString(59, CbCityMun.getSelectedItem().toString());
            // ps.setString(60, dateSPouse);
            // ps.setString(61,position1.getText());
            LoadLatestIDforUppdate();
            ps.setString(61, InformantID.getText());

            ps.executeUpdate();

            //JOptionPane.showMessageDialog(null,"Succefully Updated Informant");
            //ID=0;
            System.out.println("Updated succesfully");

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    public void UPDATE_ALL() {
        try {

            if (f_name.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "the Field First Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                f_name.requestFocus();
            } else if (M_Name.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Middle Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                M_Name.requestFocus();
            } else if (Lname.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Last Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                Lname.requestFocus();
            } else if (age.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Age is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                age.requestFocus();
            } else if (nationalilty.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field nationality Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                nationalilty.requestFocus();
            } else if (religion.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Religion is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                religion.requestFocus();
            } else if (cb_maritals_status.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field nationality Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                cb_maritals_status.requestFocus();
            } else if (alias.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Alias Name is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                alias.requestFocus();
            } else if (place_birth.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Place of Birth is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                place_birth.requestFocus();
            } else if (presentADD.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Address is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                presentADD.requestFocus();
            } else if (presentADD.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Address is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                presentADD.requestFocus();
            } else if (presentADD.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Address is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                presentADD.requestFocus();
            } else if (ZipCode.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Zipcode is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                ZipCode.requestFocus();
            } else if (P_Barangay.getSelectedItem().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Present Barangay is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                P_Barangay.requestFocus();
            } else if (S_Codification.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field Source Codification is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                S_Codification.requestFocus();
            } else if (Status_Codification.getSelectedItem().equals("Select Status")) {
                JOptionPane.showMessageDialog(this, "the Field Source Codification is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                Status_Codification.requestFocus();
            } else if (position.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Employment Positon in the Affiiliation-Skills- Employement Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(2);
                position.requestFocus();
            } else if (dateRec.equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Date of Recuitment  in the Affiiliation-Skills- Employement Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(2);
                dateReC.requestFocus();
            } else if (Mode_Contanct.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Mode of Contact  in the Contact Information  Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(4);
                Mode_Contanct.requestFocus();
            } else if (Mobile_Num.getText().equals("")) {
                JOptionPane.showMessageDialog(this, "the Field  Mobile Number  in the Contact Information  Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(4);
                Mobile_Num.requestFocus();
            } else if (CBgender.getSelectedItem().equals("Select Gender")) {
                JOptionPane.showMessageDialog(this, "the Field  Gender of Basic Infomation  in the Contact Information  Tab is Empty", "Empty Field", JOptionPane.WARNING_MESSAGE);
                this.jTabbedPane1.setSelectedIndex(0);
                CBgender.requestFocus();
            } else {
                int a = JOptionPane.showOptionDialog(this, "Are you sure you what to Update the current Informant Records", "Update Intelegence", WIDTH, WIDTH, null, null, nationalilty);

                if (a == 0) {
                    Connection c = OpenDatabaseConnection();
                    PreparedStatement ps;

                    ps = c.prepareStatement("Update  informant_info set idInformant_info=(?),F_Name=(?),M_Name=(?),L_Name=(?),B_Date=(?),Age=(?),Nationality=(?),Religion=(?),Mar_status=(?),Education=(?),Alias=(?),Place_Birth=(?),P_Adrress=(?),Per_Adrress=(?),Zipcode=(?),S_Codification=(?),Status=(?),B_PAdrress=(?),B_PreAdress=(?),Face=(?),Hair=(?),Complexion=(?),Eyes=(?),Build=(?),Body=(?),Gen_App=(?),Iden_Char=(?),Height=(?),Mel_Service=(?),Other_Org=(?),F_Training=(?),Employement=(?),Position=(?),D_Recuitment=(?),N_Employer=(?),TerminationDate=(?),Mode_Con=(?),Mob_no=(?),Email=(?),P_Con=(?),P_Con_num=(?),EntryTime=(?),EntryDate=(?),PictureFilePath=(?),CodeName=(?),Psedonym=(?),Handlers=(?),OperationProject=(?),SpouseName=(?),TINNR=(?),Gender=(?),Target=(?) where idInformant_info like(?)");
                    //  +"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"','"++"'" + ",'"++"','"++"','"++"','"++"','"++"','"++"','"+)+"','"+"','"++"','"++"')");
                    ps.setString(1, this.InformantID.getText());
                    ps.setString(2, this.f_name.getText());
                    ps.setString(3, this.M_Name.getText());
                    ps.setString(4, this.Lname.getText());
                    ps.setString(5, dateString);
                    ps.setString(6, this.age.getText());
                    ps.setString(7, this.nationalilty.getText());
                    ps.setString(8, this.religion.getText());
                    ps.setString(9, this.cb_maritals_status.getSelectedItem().toString());
//            ps.setString(10,this.education.getText());
                    ps.setString(11, this.alias.getText());
                    ps.setString(12, this.place_birth.getText());
                    ps.setString(13, this.presentADD.getText());
//            ps.setString(14,this.PermaentADD.getText());
                    ps.setString(15, this.ZipCode.getText());
                    ps.setString(16, this.S_Codification.getText());
                    ps.setString(17, this.Status_Codification.getSelectedItem().toString());
                    ps.setString(18, this.P_Barangay.getSelectedItem().toString());
                    //  ps.setString(19,this.Permanet_Barangay.getSelectedItem().toString());
                    //  ps.setString(20,this.face.getText());
                    //   ps.setString(21,this.Hair.getText());
                    //    ps.setString(22,this.Complexion.getSelectedItem().toString());
                    //   ps.setString(23,this.Eyes.getText());
                    //   ps.setString(24,this.Build.getText());
                    //   ps.setString(25,this.Body.getText());
                    //   ps.setString(26,this.Gen_Apprerance.getText());
                    //   ps.setString(27,this.Inden_char.getText());
                    //   ps.setString(28,this.Height.getText());
                    // ps.setString(29,this.Mil_Services.getText());
                    //  ps.setString(30,this.Other_Org.getText());
                    //   ps.setString(31,this.Fore_training.getText());
                    //    ps.setString(32,this.Employement.getText());
                    ps.setString(33, this.position.getText());

                    df = DateFormat.getDateInstance();
                    dateRec = String.valueOf(df.format(date.getDate()));
                    System.out.println(dateRec);
                    ps.setString(34, dateRec);
                    // ps.setString(35,this.Add_emloyer.getText());
                    // ps.setString(36,this.Termination_date.getText());
                    ps.setString(37, this.Mode_Contanct.getText());
                    ps.setString(38, this.Mobile_Num.getText());
                    //    ps.setString(39,this.Email.getText());
                    //   ps.setString(40,this.ContactPersonm.getText());
                    //   ps.setString(41,this.Mobile_Contact_Per.getText());
                    ps.setString(42, this.Time);
                    ps.setString(43, this.Date);

                    String updateS = imagePath;
                    // updateS=updateS.replace("\\", "/");
                    System.out.println(imagePath + " hahahha");
                    System.out.println(ImageFilePath.getText());
                    ps.setString(44, ImageFilePath.getText());

                    //  ps.setString(45,CodeName.getText().toString());
                    //  ps.setString(46,this.pydonym.getText());
                    ps.setString(47, this.Handler.getText());
                    // ps.setString(48,this.OperationProject.getText());
                    //ps.setString(49,this.Spouse.getText());
                    // ps.setString(50,this.TIN.getText());
                    ps.setString(51, this.CBgender.getSelectedItem().toString());

                    //ps.setString(52,this.target.getText());
                    ps.setString(53, String.valueOf(ID));

                    ps.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Succefully Updated Informant");
                    ID = 0;
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
            System.out.println(e);
        }

    }

    public void LoadLatestIDforUppdate() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where F_name='" + f_name.getText() + "' and M_Name='" + M_Name.getText() + "' and L_Name='" + Lname.getText() + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                ID = Integer.parseInt(rs.getString(1));
                System.out.println(ID + " ID info to update");
            }

            ID = Integer.parseInt(rs.getString(1));
            InformantID.setText(rs.getString(1));

        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public boolean VerifyINput() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where F_name='" + f_name.getText() + "' and M_Name='" + M_Name.getText() + "' and L_Name='" + Lname.getText() + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                ID = Integer.parseInt(rs.getString(1));
                System.out.println(ID + " ID info to update");
                JOptionPane.showMessageDialog(this, "Informant Profile Duplication: ID Number " + ID);
                return true;
            }

            // ID=Integer.parseInt( rs.getString(1));
            //InformantID.setText(rs.getString(1));
            //return false;
        } catch (SQLException | NumberFormatException | HeadlessException e) {
            System.out.println(e);
        }
        return false;

    }

    public void LoadChild() {

        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  child  where Father_ID like '" + InformantID.getText() + "'");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2), rs.getString(3)});

            }
        } catch (SQLException ex) {
            Logger.getLogger(Legacy_Final.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
