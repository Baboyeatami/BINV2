/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bin;

//import walaysense.StatForm;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JRDesignQuery;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Sammy Guergachi <sguergachi at gmail.com>
 */
public class Records extends javax.swing.JInternalFrame {

    IAPS iaps;
    SDCSDS sdcsds;
    DateFormat df;
    ViewALLDETAILS view;
    Records rec;
    String dateF, dateT;
    Legacy_Update leg_up;
    int ID = 0;
    Boolean isPrinted = false, isAll = true, isInfomant = false, isLegacy = false;
    public boolean isUser;
    String dateRec;

    JMenuItem IntelReport = new JMenuItem("Add Intel Report");
    JMenuItem QRGenerator = new JMenuItem("Generate QR Receipt");
    JMenuItem QRverificator = new JMenuItem("Validate QR Receipt");
    JPopupMenu menu = new JPopupMenu();
    IntelReport intelReport;
    QR_Verifification qR_Verifification;

    public DefaultTableModel model = new DefaultTableModel();
    int informantID;

    /**
     * Creates new form Records
     */
    public Records() throws ParseException {
        initComponents();
        model = (DefaultTableModel) jTable1.getModel();
        LoadNameOnlyData();
        Search.requestFocus();
        // CheckboxALL.setSelected(true);

        IntelReport.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 0)));
                int id = Integer.parseInt(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 0)));

                if (intelReport == null) {
                    intelReport = new IntelReport();
                    intelReport.Set_informantID(id);
                    intelReport.setVisible(true);
                } else {
                    intelReport.Set_informantID(id);
                    intelReport.setVisible(true);
                }

                System.out.println(" Add Intel Report");

            }
        });

        QRGenerator.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("QR fuck");
                QR_Generate(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 0)));

            }
        });

        QRverificator.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                System.out.println("QR Verification fuck");
                QR_Verificator();
            }
        });

        menu.add(IntelReport);
        menu.add(QRGenerator);
        // menu.add(QRverificator);

        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    menu.show(e.getComponent(), e.getX(), e.getY());

                }
            }

        });

    }

    UpdateProfile UpdateP;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by th2 Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        CBSearch = new javax.swing.JComboBox();
        Search = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        dateFrom2 = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        DateTO2 = new com.toedter.calendar.JDateChooser();
        jToggleButton3 = new javax.swing.JToggleButton();
        jPanel2 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();

        setBackground(new java.awt.Color(51, 51, 51));
        setTitle("INFORMANT RECORDS");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Records2.png"))); // NOI18N
        setMaximumSize(new java.awt.Dimension(2147483647, 566));

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Search By");

        CBSearch.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        CBSearch.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Category", "Alias", "First Name", "Last Name", "Middle Name", "Identifying Marks", "Civil Status", "Date Recuitment" }));
        CBSearch.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CBSearchItemStateChanged(evt);
            }
        });
        CBSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CBSearchActionPerformed(evt);
            }
        });

        Search.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                SearchCaretUpdate(evt);
            }
        });
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Alias", "Date of Recruitment"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dateFrom2.setDateFormatString("MMMM dd, yyyy");
        dateFrom2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        dateFrom2.setMinSelectableDate(new java.util.Date(-62135737139000L));

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel8.setText("From");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel9.setText("To");

        DateTO2.setDateFormatString("MMMM dd, yyyy");
        DateTO2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jToggleButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/search2.png"))); // NOI18N
        jToggleButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dateFrom2, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DateTO2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToggleButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dateFrom2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(DateTO2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jToggleButton3))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CBSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(5, 5, 5))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CBSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(Search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 470, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Switch.png"))); // NOI18N
        jButton6.setText("Update All Details");
        jButton6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton6.setPreferredSize(new java.awt.Dimension(151, 41));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Close.png"))); // NOI18N
        jButton7.setText("Close");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/print.png"))); // NOI18N
        jButton8.setText("Actual BIN");
        jButton8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton8.setPreferredSize(new java.awt.Dimension(151, 41));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/print.png"))); // NOI18N
        jButton9.setText(" Searched Details");
        jButton9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton9.setPreferredSize(new java.awt.Dimension(151, 41));
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Info.png"))); // NOI18N
        jButton10.setText("Profile Sheet");
        jButton10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton10.setIconTextGap(5);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Information.png"))); // NOI18N
        jButton11.setText("Source Data Card");
        jButton11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton11.setIconTextGap(2);
        jButton11.setPreferredSize(new java.awt.Dimension(151, 41));
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton12.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Refresh.png"))); // NOI18N
        jButton12.setText("Refresh List");
        jButton12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton12.setIconTextGap(2);
        jButton12.setPreferredSize(new java.awt.Dimension(151, 41));
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bin/images/Refresh.png"))); // NOI18N
        jButton13.setText("Verify ID Receipt");
        jButton13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jButton13.setIconTextGap(2);
        jButton13.setPreferredSize(new java.awt.Dimension(151, 41));
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(jButton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton10)
                .addGap(5, 5, 5)
                .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        // TODO add your handling code here:
        if (CBSearch.getSelectedItem().equals("Alias")) {
            LoadSerachDataAliasname();
        } else if (CBSearch.getSelectedItem().equals("First Name")) {
            LoadSerachDataFname();

        } else if (CBSearch.getSelectedItem().equals("Middle Name")) {
            LoadSerachDataMname();

        } else if (CBSearch.getSelectedItem().equals("Last Name")) {
            LoadSerachDataLname();

        } else if (CBSearch.getSelectedItem().equals("Identifying Marks")) {
            LoadSerachDataIdenfiyingMarks();

        } else if (CBSearch.getSelectedItem().equals("Civil Status")) {
            LoadSerachDataSingle();

        }

    }//GEN-LAST:event_SearchActionPerformed

    public void LogABS() {
        try {
            Calendar cal = Calendar.getInstance();
            String Time, Date;
            SimpleDateFormat date = new SimpleDateFormat("yyyy/MM/d");
            SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
            Date = date.format(cal.getTime());
            Time = time.format(cal.getTime());

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            //ps=c.prepareStatement("Insert into informant_info (F_Name,M_Name,L_Name,B_Date,Age,Nationality,Religion,Mar_status,Education,Alias,Place_Birth,P_Adrress,Per_Adrress,Zipcode,S_Codification,Status,B_PAdrress,B_PreAdress,SpouseName,Gender,PictureFilePath,EntryTime,EntryDate,D_Recuitment,Provice,Mun_City,BirthCounty,E_Date,E_Time,Mode_Con,Mob_no,Email,P_Con,P_Con_num)values"+"('"+this.f_name.getText()+"','"+this.M_Name.getText()+"','"+this.Lname.getText()+"','"+dateString+"','"+this.age.getText()+"','"+this.nationalilty.getText()+"','"+this.religion.getText()+"','"+this.cb_maritals_status.getSelectedItem().toString()+"','"+this.education.getText()+"','"+this.alias.getText()+"','"+this.place_birth.getText()+"','"+this.presentADD.getText()+"','"+this.PermaentADD.getText()+"','"+this.ZipCode.getText()+"','"+this.S_Codification.getText()+"','"+this.Status_Codification.getSelectedItem().toString()+"','"+this.P_Barangay.getSelectedItem().toString()+"','"+this.Permanet_Barangay.getSelectedItem().toString()+"','"+this.Spouse.getText()+"','"+this.CBgender.getSelectedItem().toString()+"','"+imagePath+"','"+Time+"','"+Date+"','"+dateRec+"','"+Province.getText()+"','"+CbCityMun.getSelectedItem().toString()+"','"+BirthCountry.getText()+"','"+Date+"','"+Time+"','"+Mode_Contanct.getText()+"','"+Mobile_Num.getText()+"','"+Email.getText()+"','"+ContactPersonm.getText()+"','"+Mobile_Num.getText()+"')");
            ps = c.prepareStatement("Insert into logs(Act,Time,Date)values" + "('ABS print date From " + dateF + " to " + dateT + "','" + Time + "','" + Date + "')");
            ps.execute();
            // ps=c.prepareStatement("Select * from  informant_info");
        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }

    public void LogPrintSearch() {
        try {
            Calendar cal = Calendar.getInstance();
            String Time, Date;
            SimpleDateFormat date = new SimpleDateFormat("yyyy/MM/d");
            SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
            Date = date.format(cal.getTime());
            Time = time.format(cal.getTime());

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            //ps=c.prepareStatement("Insert into informant_info (F_Name,M_Name,L_Name,B_Date,Age,Nationality,Religion,Mar_status,Education,Alias,Place_Birth,P_Adrress,Per_Adrress,Zipcode,S_Codification,Status,B_PAdrress,B_PreAdress,SpouseName,Gender,PictureFilePath,EntryTime,EntryDate,D_Recuitment,Provice,Mun_City,BirthCounty,E_Date,E_Time,Mode_Con,Mob_no,Email,P_Con,P_Con_num)values"+"('"+this.f_name.getText()+"','"+this.M_Name.getText()+"','"+this.Lname.getText()+"','"+dateString+"','"+this.age.getText()+"','"+this.nationalilty.getText()+"','"+this.religion.getText()+"','"+this.cb_maritals_status.getSelectedItem().toString()+"','"+this.education.getText()+"','"+this.alias.getText()+"','"+this.place_birth.getText()+"','"+this.presentADD.getText()+"','"+this.PermaentADD.getText()+"','"+this.ZipCode.getText()+"','"+this.S_Codification.getText()+"','"+this.Status_Codification.getSelectedItem().toString()+"','"+this.P_Barangay.getSelectedItem().toString()+"','"+this.Permanet_Barangay.getSelectedItem().toString()+"','"+this.Spouse.getText()+"','"+this.CBgender.getSelectedItem().toString()+"','"+imagePath+"','"+Time+"','"+Date+"','"+dateRec+"','"+Province.getText()+"','"+CbCityMun.getSelectedItem().toString()+"','"+BirthCountry.getText()+"','"+Date+"','"+Time+"','"+Mode_Contanct.getText()+"','"+Mobile_Num.getText()+"','"+Email.getText()+"','"+ContactPersonm.getText()+"','"+Mobile_Num.getText()+"')");
            ps = c.prepareStatement("Insert into logs(Act,Time,Date)values" + "('Print Seach Data " + CBSearch.getSelectedItem() + " Pattern " + Search.getText() + "','" + Time + "','" + Date + "')");
            ps.execute();
            System.out.println(" logged");
        } catch (SQLException ex) {
            System.out.println(ex);
        }

    }

    private void SearchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_SearchCaretUpdate
        // TODO add your handling code here:
        if (CBSearch.getSelectedItem().equals("Alias")) {
            LoadSerachDataAliasname();
        } // else if (CBSearch.getSelectedItem().equals("Alias") && isLegacy) {
        //    LoadSerachDataAliasnameLegacy();
        //  }
        //   else if (CBSearch.getSelectedItem().equals("Alias") && isInfomant){
        //     LoadSerachDataAliasnameInformant();
        //  }
        else if (CBSearch.getSelectedItem().equals("First Name")) {
            LoadSerachDataFname();

        } //   else if (CBSearch.getSelectedItem().equals("First Name") && isLegacy) {
        //  LoadSerachDataFnameLEGACY();
        //}
        /// else if (CBSearch.getSelectedItem().equals("First Name") && isInfomant) {
        //  LoadSerachDataFnameINFORMANT();
        // }
        else if (CBSearch.getSelectedItem().equals("Middle Name")) {
            LoadSerachDataMname();

        } //  else if (CBSearch.getSelectedItem().equals("Middle Name") && isLegacy) {
        //   LoadSerachDataMnameLEGACY();
        // }
        //   else if (CBSearch.getSelectedItem().equals("Middle Name") && isInfomant) {
        //    LoadSerachDataMnameINFORAMNT();
        //  }
        else if (CBSearch.getSelectedItem().equals("Last Name")) {
            LoadSerachDataLname();

        } //  else if (CBSearch.getSelectedItem().equals("Last Name") && isLegacy) {
        //
        //   LoadSerachDataLnameLEGACY();
        //   }
        //    else if (CBSearch.getSelectedItem().equals("Last Name") && isInfomant) {
        //       LoadSerachDataLnameINFORMANT();
        //  }
        else if (CBSearch.getSelectedItem().equals("Identifying Marks")) {
            LoadSerachDataIdenfiyingMarks();

        } //  else if (CBSearch.getSelectedItem().equals("Identifying Marks") && isLegacy) {
        //  LoadSerachDataIdenfiyingMarksLEGACY();
        // }
        else if (CBSearch.getSelectedItem().equals("Civil Status")) {
            LoadSerachDataSingle();

        } else if (CBSearch.getSelectedItem().equals("Date Recuitment")) {
            LoadSerachDateREC();

        }

    }//GEN-LAST:event_SearchCaretUpdate

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        System.out.println(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 0)));
        informantID = Integer.parseInt(String.valueOf(model.getValueAt(jTable1.getSelectedRow(), 0)));
        ID = informantID;
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // TODO add your handling code here:
            if (view == null) {
                view = new ViewALLDETAILS();
            }
            if (ID <= 0) {
                JOptionPane.showMessageDialog(this, "Please choose an informant", "Select IAPS profile", JOptionPane.ERROR_MESSAGE);
            } else {

                view.ID = ID;
                if (isUser) {
                    view.Update_Button.setEnabled(false);
                    view.jButton3.setEnabled(false);
                    view.jButton1.setEnabled(false);
                    view.jButton7.setEnabled(false);
                    view.jButton2.setEnabled(false);
                    view.jButton5.setEnabled(false);
                    view.jButton4.setEnabled(false);
                    view.jButton8.setEnabled(false);
                }
                view.LoadRecordsProfile();
                view.UPDATEOthersDate();
                view.LoadChild();
                view.setVisible(true);
            }
        } catch (HeadlessException | ParseException e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Please choose an informant", "Select IAPS profile", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton6ActionPerformed

    public void PrintIapsLegacy() {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Legacy.jrxml");

            String SQL = "Select * from  informant_info where idInformant_info='" + ID + "'";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, null, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    public void PrintIapsLegacySDCSDS() {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Legacy_1.jrxml");

            String SQL = "Select * from  informant_info where idInformant_info='" + ID + "'";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, null, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        if (dateFrom2.getDate() == null && DateTO2.getDate() == null || dateFrom2.getDate() == null || DateTO2.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Covered period is invalid or empty. Please supply valid covered period", "Actual BIN", JOptionPane.ERROR_MESSAGE);
        } else {
            PrintPrintActualBINT_CoveredPeriod();
            LogABS();
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

        try {
            // TODO add your handling code here:

            df = new SimpleDateFormat("yyyy/MM/d ");
            dateF = String.valueOf(df.format(dateFrom2.getDate()));
            dateT = String.valueOf(df.format(DateTO2.getDate()));
            Date myDateFrom = df.parse(dateF);
            Date myDateTO = df.parse(dateT);
            System.out.println(dateF + "  from");
            System.out.println(dateT + "  to");

            LoadshowCoveredPeriod();
            isPrinted = true;

        } catch (ParseException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        if (CBSearch.getSelectedItem().toString().equals("Alias")) {
            PrintSearchDataAlias();
            LogPrintSearch();
        } else if (CBSearch.getSelectedItem().toString().equals("Date Recuitment")) {
            PrintSearchDataDateREC();
        } else if (CBSearch.getSelectedItem().toString().equals("First Name")) {
            PrintSearchDataF_NAME();
            LogPrintSearch();

        } else if (CBSearch.getSelectedItem().toString().equals("Last Name")) {
            PrintSearchDataL_NAME();
        } else if (CBSearch.getSelectedItem().toString().equals("Middle Name")) {
            PrintSearchDataMidle_NAME();
            LogPrintSearch();
        } else if (CBSearch.getSelectedItem().toString().equals("Identifying Marks")) {
            PrintSearchDataIndenfiMARKS();
            LogPrintSearch();
        } else if (CBSearch.getSelectedItem().toString().equals("Civil Status")) {
            PrintSearchDataCiVILSTATUS();
            LogPrintSearch();
        } else if (CBSearch.getSelectedItem().toString().equals("Select Category")) {
            JOptionPane.showMessageDialog(this, "Please select category to continue", "Searched Details", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_jButton9ActionPerformed

    private void CBSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CBSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CBSearchActionPerformed

    private void CBSearchItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CBSearchItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_CBSearchItemStateChanged

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        try {
            if (VerifyDataIAPS()) {
                JOptionPane.showMessageDialog(this, "Please supply the scanned image of the Profile Sheet to continue.", "Profile Sheet Scanned Image Empty", JOptionPane.ERROR_MESSAGE);
            } else {
                PrintIapsLegacy();
                LogPrintIPAS();
            }

        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Invalid selection. Please select an informant", "Invalid Informant", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        try {
            if (VerifyDataSDCSDS()) {
                JOptionPane.showMessageDialog(this, "Please supply the scanned image of the Source Data Card to continue.", "Source Data Card Scanned Image Empty", JOptionPane.ERROR_MESSAGE);
            } else {
                PrintIapsLegacySDCSDS();
                LogPrintDataCard();
            }
        } catch (Exception e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Invalid selection. Please select an informant", "Invalid Informant", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        try {
            // TODO add your handling code here:
            LoadNameOnlyData();
        } catch (ParseException ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        QR_Verificator();
    }//GEN-LAST:event_jButton13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Records.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Records().setVisible(true);
                } catch (ParseException ex) {
                    System.out.println("");
                }
            }
        });
    }

    public void LoadNameOnlyData() throws ParseException {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }

        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    public void LoadNameOnlyDataLegacy() throws ParseException {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where infoType='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }

        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    public void LoadNameOnlyDataINFORMANT() throws ParseException {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where infoType !='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {

                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }

        } catch (SQLException e) {
            System.out.println(e);
        }
    }

    public Boolean VerifyDataIAPS() {
        try {

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where idInformant_info='" + ID + "'");
            rs = ps.executeQuery();
            while (rs.next()) {
                if ("".equals(rs.getString(63))) {
                    System.out.println("Legacy True");
                    return true;
                } else {
                    System.out.println("Legacy false");
                }

            }

        } catch (SQLException e) {
            System.out.println(e);
        }
        return false;
    }

    public Boolean VerifyDataSDCSDS() {
        try {

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where idInformant_info='" + ID + "'");
            rs = ps.executeQuery();
            while (rs.next()) {
                if ("".equals(rs.getString(64))) {
                    System.out.println("Legacy True");
                    return true;
                } else {
                    System.out.println("Legacy false");
                }

            }

        } catch (SQLException e) {
            System.out.println(e);
        }
        return false;
    }

    public void LoadSerachDataFname() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where F_Name like '" + S + "' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataFnameLEGACY() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where F_Name like '" + S + "' and infoType='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataFnameINFORMANT() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where F_Name like '" + S + "' and infoType!='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDateREC() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where D_Recuitment like '" + S + "' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDateREC_LEGACY() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where D_Recuitment like '" + S + "' and infoType='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDateREC_Informant() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where D_Recuitment like '" + S + "' and infoType!='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataMname() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where M_Name like '" + S + "' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataMnameLEGACY() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where M_Name like '" + S + "' and infoType='Legacy'order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataMnameINFORAMNT() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where M_Name like '" + S + "' and infoType!='Legacy'order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataLname() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where L_Name like '" + S + "' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataLnameLEGACY() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where L_Name like '" + S + "' and infoType='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataLnameINFORMANT() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where L_Name like '" + S + "' and infoType!='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataAliasname() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where Alias like '" + S + "' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataAliasnameLegacy() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where Alias like '" + S + "' and infoType='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataAliasnameInformant() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where Alias like '" + S + "' and infoType!='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataIdenfiyingMarks() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where Iden_Char like '" + S + "' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataIdenfiyingMarksLEGACY() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where Iden_Char like '" + S + "' and infoType='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataIdenfiyingMarksINFORMANT() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where Iden_Char like '" + S + "' and infoType!='Legacy' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadSerachDataSingle() {
        try {
            model.setRowCount(0);
            String S = "%" + this.Search.getText() + "%";
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where Mar_status like '" + S + "' order by D_Recuitment");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4), rs.getString(10), rs.getString(51)});
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void LoadRecordsProfileIAPS() {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where idInformant_info='" + ID + "'");
            rs = ps.executeQuery();

            if (rs.next()) {

                iaps.Alias.setText(rs.getString(10));
                iaps.CodeName.setText(rs.getString(43));
                iaps.Pseudonym.setText(rs.getString(44));
                iaps.Name.setText(rs.getString(2) + " " + rs.getString(3) + " " + rs.getString(4));
                iaps.SourceCode.setText(rs.getString(15));
                iaps.PlaceBirth.setText(rs.getString(11));
                iaps.Occupation.setText(rs.getString(32));
                iaps.Education.setText(rs.getString(9));
                iaps.BirthDate.setText(rs.getString(52));
                iaps.NameAddresofEmpolyere.setText(rs.getString(33));
                //iaps.Education.setText(rs.getString(0));
                iaps.Position.setText(rs.getString(40));
                iaps.NameofSpouse.setText(rs.getString(47));
                //this.InformantID.setText(rs.getString(42));
                System.out.println(rs.getString(42));
                File FImage = new File(rs.getString(42));
                // ImageFilePath.setText(rs.getString(44));
                try {
                    Image image = ImageIO.read(FImage);
                    Image myImage = image.getScaledInstance(161, 151, Image.SCALE_FAST);
                    iaps.PictureView.setIcon(new ImageIcon(myImage));
                } catch (IOException ex) {

                    JOptionPane.showMessageDialog(this, ex);
                    System.out.println(ex);

                }

                //Image image=ImageIO.read(sFile);
                //Image myImage=image.getScaledInstance(161, 151,Image.SCALE_FAST)
            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    public void LoadRecordsProfileSDCSDS() throws ParseException {
        try {
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info where idInformant_info='" + ID + "'");
            rs = ps.executeQuery();
            if (rs.next()) {
                sdcsds.F_name.setText(rs.getString(2));
                sdcsds.LastName.setText(rs.getString(4));
                sdcsds.MiddleName.setText(rs.getString(3));
                sdcsds.DBirth.setText(rs.getString(52));
                sdcsds.Place_Birth.setText(rs.getString(11));
                sdcsds.Gender.setText(rs.getString(49));
                sdcsds.Naitolituy.setText(rs.getString(6));
                sdcsds.Maritalstatus.setText(rs.getString(8));
                sdcsds.Spouse_Name.setText(rs.getString(47));
                sdcsds.CellphoneNum.setText(rs.getString(36));
                sdcsds.TinNumber.setText(rs.getString(48));
                sdcsds.Complexion.setText(rs.getString(21));
                sdcsds.Build.setText(rs.getString(23));
                sdcsds.Face.setText(rs.getString(19));
                sdcsds.Hair.setText(rs.getString(20));
                sdcsds.Eyes.setText(rs.getString(22));
                sdcsds.body.setText(rs.getString(24));
                sdcsds.Height.setText(rs.getString(27));
                sdcsds.Gen_app.setText(rs.getString(25));
                sdcsds.IdentifyChar.setText(rs.getString(26));
                sdcsds.Education.setText(rs.getString(9));
                sdcsds.Fore_traing.setText(rs.getString(30));
                sdcsds.MilitaryServicess.setText(rs.getString(28));
                sdcsds.Employment.setText(rs.getString(31));
                sdcsds.occupation.setText(rs.getString(32));
                sdcsds.MemBEr_Org.setText(rs.getString(29));
                sdcsds.Targets.setText(rs.getString(50));
                sdcsds.Codename.setText(rs.getString(43));
                sdcsds.OperationPorj.setText(rs.getString(46));
                sdcsds.DateofRecuitment.setText(rs.getString(51));
                sdcsds.Handlers.setText(rs.getString(45));
                sdcsds.ContactPErson.setText(rs.getString(38) + " " + rs.getString(39));

                //this.InformantID.setText(rs.getString(42));
                System.out.println(rs.getString(42));
                File FImage = new File(rs.getString(42));
                // ImageFilePath.setText(rs.getString(44));
                try {
                    Image image = ImageIO.read(FImage);
                    Image myImage = image.getScaledInstance(161, 151, Image.SCALE_FAST);
                    sdcsds.PictureView.setIcon(new ImageIcon(myImage));
                } catch (IOException ex) {

                    JOptionPane.showMessageDialog(this, ex);
                    System.out.println(ex);

                }

                //Image image=ImageIO.read(sFile);
                //Image myImage=image.getScaledInstance(161, 151,Image.SCALE_FAST)
            }

        } catch (SQLException e) {
            System.out.println(e);
        }

    }

    public void PrintPrintActualBIN() {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\ABE.jrxml");

            String SQL = "Select * from informant_info order by D_Recuitment";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, null, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    @SuppressWarnings({"unchecked", "unchecked", "unchecked"})
    public void PrintSearchDataDateREC() {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\AllInfo_SearchBY.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "Select * from  informant_info where D_Recuitment like '" + S + "' order by D_Recuitment";

            HashMap m = new HashMap<>();

            m.put("parameter1", "Covered Period: " + Search.getText());
            m.put("parameter2", "Date Format: YYYY-MM-D");

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    @SuppressWarnings({"unchecked", "unchecked", "unchecked", "unchecked"})
    public void PrintSearchDataAlias() {
        try {
            JasperReport JR;
            JasperPrint JP;

            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\AllInfo_SearchBY.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "Select * from  informant_info where Alias like '" + S + "' order by D_Recuitment";

            HashMap m = new HashMap<>();

            m.put("parameter1", "Alias: " + Search.getText());
            m.put("parameter2", "Alias Pattern");

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    @SuppressWarnings({"unchecked", "unchecked", "unchecked", "unchecked"})
    public void PrintSearchDataF_NAME() {
        try {
            JasperReport JR;
            JasperPrint JP;

            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\AllInfo_SearchBY.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "Select * from  informant_info where F_Name like '" + S + "' order by D_Recuitment";

            HashMap m = new HashMap<>();

            m.put("parameter1", "First Name: " + Search.getText());
            m.put("parameter2", "Search Pattern");

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    @SuppressWarnings({"unchecked", "unchecked", "unchecked"})
    public void PrintSearchDataL_NAME() {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\AllInfo_SearchBY.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "Select * from  informant_info where L_Name like '" + S + "' order by D_Recuitment";

            HashMap m = new HashMap<>();

            m.put("parameter1", "Last Name: " + Search.getText());
            m.put("parameter2", "Search Pattern");

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    private void QR_Generate(String id) {

        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            System.out.println(System.getProperty("user.dir") + "\\\\reports\\\\Informant_QR.jrxml");
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\Informant_QR.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "SELECT idInformant_info,F_Name,M_Name,L_Name,PictureFilePath FROM bin.informant_info where idInformant_info='" + id + "'";

            //HashMap m = new HashMap<>();
            // m.put("parameter1", "Covered Period: " + Search.getText());
            //m.put("parameter2", "Date Format: YYYY-MM-D");
            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, null, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);
        } catch (JRException ex) {
            Logger.getLogger(Records.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void QR_Verificator() {

        if (qR_Verifification == null) {
            qR_Verifification = new QR_Verifification();
            qR_Verifification.setRecord(this);
            qR_Verifification.TreadRunner = true;
            qR_Verifification.setVisible(true);

        } else {
            qR_Verifification.setVisible(true);
            qR_Verifification.setRecord(this);
            qR_Verifification.TreadRunner = true;
        }

    }

    void validQR(int id) {
        int numCh1 = 0;

        String[] moves = {"Select Option", "Add Intet Report ", "View Profile Sheet",};
        JComboBox<?> optionList = new JComboBox<Object>(moves);
        JOptionPane.showMessageDialog(
                this,
                optionList,
                "Select Action",
                JOptionPane.YES_NO_CANCEL_OPTION
        );
        numCh1 = optionList.getSelectedIndex();

        if (numCh1 == 0) {
            JOptionPane.showMessageDialog(this, "Please Select Action");
        } else if (numCh1 == 1) {

        } else if (numCh1 == 2) {

            try {
                // TODO add your handling code here:
                if (view == null) {
                    view = new ViewALLDETAILS();
                }
                if (id <= 0) {
                    JOptionPane.showMessageDialog(this, "Please choose an informant", "Select IAPS profile", JOptionPane.ERROR_MESSAGE);
                } else {

                    view.ID = id;
                    if (isUser) {
                        view.Update_Button.setEnabled(false);
                        view.jButton3.setEnabled(false);
                        view.jButton1.setEnabled(false);
                        view.jButton7.setEnabled(false);
                        view.jButton2.setEnabled(false);
                        view.jButton5.setEnabled(false);
                        view.jButton4.setEnabled(false);
                        view.jButton8.setEnabled(false);
                    }
                    view.LoadRecordsProfile();
                    view.UPDATEOthersDate();
                    view.LoadChild();
                    view.setVisible(true);
                }
            } catch (HeadlessException | ParseException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(this, "Please choose an informant", "Select IAPS profile", JOptionPane.ERROR_MESSAGE);

            }

        } else if (numCh1 == 3) {

        }

    }

    @SuppressWarnings({"unchecked", "unchecked", "unchecked"})
    public void PrintSearchDataMidle_NAME() {
        try {
            JasperReport JR;
            JasperPrint JP;

            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\AllInfo_SearchBY.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "Select * from  informant_info where M_Name like '" + S + "' order by D_Recuitment";

            HashMap m = new HashMap<>();

            m.put("parameter1", "Middle Name: " + Search.getText());
            m.put("parameter2", "Search Pattern");

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    @SuppressWarnings("unchecked")
    public void PrintSearchDataIndenfiMARKS() {
        try {
            JasperReport JR;
            JasperPrint JP;

            // String Q="%"+this.txtSearch.getText() +"%";
            // String Source="C:\\Users\\JAMIEXXX3\\Documents\\NetBeansProjects\\Phonelist\\src\\Forms\\report1.jrxml";
            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\AllInfo_SearchBY.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "Select * from  informant_info where Iden_Char like '" + S + "' order by D_Recuitment";

            HashMap m = new HashMap<>();

            m.put("parameter1", "Indentifying marks: " + Search.getText());
            m.put("parameter2", "Search Pattern");

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    @SuppressWarnings({"unchecked", "unchecked"})
    public void PrintSearchDataCiVILSTATUS() {
        try {
            JasperReport JR;
            JasperPrint JP;

            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\AllInfo_SearchBY.jrxml");
            String S = "%" + this.Search.getText() + "%";
            String SQL = "Select * from  informant_info where Mar_status like '" + S + "' order by D_Recuitment";

            HashMap m = new HashMap<>();

            m.put("parameter1", "Civil status: " + Search.getText());
            m.put("parameter2", "Search Pattern");

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);
            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());
            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);

            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    @SuppressWarnings({"unchecked", "unchecked", "unchecked", "unchecked", "unchecked", "unchecked", "unchecked", "unchecked", "unchecked", "unchecked"})
    public void PrintPrintActualBINT_CoveredPeriod() {
        try {
            JasperReport JR;
            JasperPrint JP;

            DBConnection.init();
            JasperDesign Jd = JRXmlLoader.load(System.getProperty("user.dir") + "\\\\reports\\\\ABE.jrxml");

            String SQL = "Select * from  informant_info where D_Recuitment between '" + dateF + "' and '" + dateT + "' order by D_Recuitment";

            JRDesignQuery JQ = new JRDesignQuery();
            JQ.setText(SQL);
            Jd.setQuery(JQ);
            JR = JasperCompileManager.compileReport(Jd);

            df = new SimpleDateFormat("MMMMMMMM d, yyyy");
            dateF = String.valueOf(df.format(dateFrom2.getDate()));
            dateT = String.valueOf(df.format(DateTO2.getDate()));

            String prepa = JOptionPane.showInputDialog(this, "Prepared by:");
            String rankD = JOptionPane.showInputDialog(this, "Designation:");

            String note = JOptionPane.showInputDialog(this, "Noted by:");
            String rankN = JOptionPane.showInputDialog(this, "Designation:");

            HashMap m = new HashMap<>();

            m.put("parameter1", "   Covered Period: " + dateF + "  to  " + dateT);
            m.put("Prepared", prepa);
            m.put("Noted", note);
            m.put("RankD", rankD);
            m.put("RandN", rankN);

            JP = JasperFillManager.fillReport(JR, m, DBConnection.getConnection());

            // JasperViewer.viewReport(JP, rootPaneCheckingEnabled, Locale.FRENCH);
            JasperViewer.viewReport(JP, false, Locale.ENGLISH);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            System.out.println(e);
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox CBSearch;
    private com.toedter.calendar.JDateChooser DateTO2;
    public javax.swing.JTextField Search;
    private javax.swing.ButtonGroup buttonGroup1;
    private com.toedter.calendar.JDateChooser dateFrom2;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable jTable1;
    private javax.swing.JToggleButton jToggleButton3;
    // End of variables declaration//GEN-END:variables

    private void LoadshowCoveredPeriod() {
        try {
            model.setRowCount(0);
            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            ps = c.prepareStatement("Select * from  informant_info  where D_Recuitment between '" + dateF + "' and '" + dateT + "'");
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString(1), rs.getString(4) + " " + rs.getString(2) + " " + rs.getString(3), rs.getString(10), rs.getString(51)});
            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }

    public void LogPrintIPAS() {
        try {
            Calendar cal = Calendar.getInstance();
            String Time, Date;
            SimpleDateFormat date = new SimpleDateFormat("yyyy/MM/d");
            SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
            Date = date.format(cal.getTime());
            Time = time.format(cal.getTime());

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            //ps=c.prepareStatement("Insert into informant_info (F_Name,M_Name,L_Name,B_Date,Age,Nationality,Religion,Mar_status,Education,Alias,Place_Birth,P_Adrress,Per_Adrress,Zipcode,S_Codification,Status,B_PAdrress,B_PreAdress,SpouseName,Gender,PictureFilePath,EntryTime,EntryDate,D_Recuitment,Provice,Mun_City,BirthCounty,E_Date,E_Time,Mode_Con,Mob_no,Email,P_Con,P_Con_num)values"+"('"+this.f_name.getText()+"','"+this.M_Name.getText()+"','"+this.Lname.getText()+"','"+dateString+"','"+this.age.getText()+"','"+this.nationalilty.getText()+"','"+this.religion.getText()+"','"+this.cb_maritals_status.getSelectedItem().toString()+"','"+this.education.getText()+"','"+this.alias.getText()+"','"+this.place_birth.getText()+"','"+this.presentADD.getText()+"','"+this.PermaentADD.getText()+"','"+this.ZipCode.getText()+"','"+this.S_Codification.getText()+"','"+this.Status_Codification.getSelectedItem().toString()+"','"+this.P_Barangay.getSelectedItem().toString()+"','"+this.Permanet_Barangay.getSelectedItem().toString()+"','"+this.Spouse.getText()+"','"+this.CBgender.getSelectedItem().toString()+"','"+imagePath+"','"+Time+"','"+Date+"','"+dateRec+"','"+Province.getText()+"','"+CbCityMun.getSelectedItem().toString()+"','"+BirthCountry.getText()+"','"+Date+"','"+Time+"','"+Mode_Contanct.getText()+"','"+Mobile_Num.getText()+"','"+Email.getText()+"','"+ContactPersonm.getText()+"','"+Mobile_Num.getText()+"')");
            ps = c.prepareStatement("Insert into logs(Act,Time,Date)values" + "('Profile sheet viewed Id " + ID + "','" + Time + "','" + Date + "')");
            ps.execute();

            System.out.println("");
            // ps=c.prepareStatement("Select * from  informant_info");
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }

    public void LogPrintDataCard() {
        try {
            Calendar cal = Calendar.getInstance();
            String Time, Date;
            SimpleDateFormat date = new SimpleDateFormat("yyyy/MM/d");
            SimpleDateFormat time = new SimpleDateFormat("HH:mm:ss");
            Date = date.format(cal.getTime());
            Time = time.format(cal.getTime());

            DBConnection.init();
            Connection c = DBConnection.getConnection();
            PreparedStatement ps;
            ResultSet rs;
            //ps=c.prepareStatement("Insert into informant_info (F_Name,M_Name,L_Name,B_Date,Age,Nationality,Religion,Mar_status,Education,Alias,Place_Birth,P_Adrress,Per_Adrress,Zipcode,S_Codification,Status,B_PAdrress,B_PreAdress,SpouseName,Gender,PictureFilePath,EntryTime,EntryDate,D_Recuitment,Provice,Mun_City,BirthCounty,E_Date,E_Time,Mode_Con,Mob_no,Email,P_Con,P_Con_num)values"+"('"+this.f_name.getText()+"','"+this.M_Name.getText()+"','"+this.Lname.getText()+"','"+dateString+"','"+this.age.getText()+"','"+this.nationalilty.getText()+"','"+this.religion.getText()+"','"+this.cb_maritals_status.getSelectedItem().toString()+"','"+this.education.getText()+"','"+this.alias.getText()+"','"+this.place_birth.getText()+"','"+this.presentADD.getText()+"','"+this.PermaentADD.getText()+"','"+this.ZipCode.getText()+"','"+this.S_Codification.getText()+"','"+this.Status_Codification.getSelectedItem().toString()+"','"+this.P_Barangay.getSelectedItem().toString()+"','"+this.Permanet_Barangay.getSelectedItem().toString()+"','"+this.Spouse.getText()+"','"+this.CBgender.getSelectedItem().toString()+"','"+imagePath+"','"+Time+"','"+Date+"','"+dateRec+"','"+Province.getText()+"','"+CbCityMun.getSelectedItem().toString()+"','"+BirthCountry.getText()+"','"+Date+"','"+Time+"','"+Mode_Contanct.getText()+"','"+Mobile_Num.getText()+"','"+Email.getText()+"','"+ContactPersonm.getText()+"','"+Mobile_Num.getText()+"')");
            ps = c.prepareStatement("Insert into logs(Act,Time,Date)values" + "('Source Data card viewed Id " + ID + "','" + Time + "','" + Date + "')");
            ps.execute();

            System.out.println("");
            // ps=c.prepareStatement("Select * from  informant_info");
        } catch (SQLException ex) {
            System.out.println(ex);
        }
    }
}
